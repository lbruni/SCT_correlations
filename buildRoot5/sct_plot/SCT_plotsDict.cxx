//
// File generated by /Users/lucreziastellabruni/Downloads/root/bin/rootcint at Wed Jun  3 13:20:11 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIUsersdIlucreziastellabrunidIDropboxdISCt_correlationsdISCT_correlationsdIbuildRoot5dIsct_plotdISCT_plotsDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SCT_plotsDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void S_plane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S_plane(void *p = 0);
   static void *newArray_S_plane(Long_t size, void *p);
   static void delete_S_plane(void *p);
   static void deleteArray_S_plane(void *p);
   static void destruct_S_plane(void *p);
   static void streamer_S_plane(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::S_plane*)
   {
      ::S_plane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S_plane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S_plane", ::S_plane::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 162,
                  typeid(::S_plane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::S_plane::Dictionary, isa_proxy, 0,
                  sizeof(::S_plane) );
      instance.SetNew(&new_S_plane);
      instance.SetNewArray(&newArray_S_plane);
      instance.SetDelete(&delete_S_plane);
      instance.SetDeleteArray(&deleteArray_S_plane);
      instance.SetDestructor(&destruct_S_plane);
      instance.SetStreamerFunc(&streamer_S_plane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::S_plane*)
   {
      return GenerateInitInstanceLocal((::S_plane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S_plane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void S_Cut_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S_Cut(void *p = 0);
   static void *newArray_S_Cut(Long_t size, void *p);
   static void delete_S_Cut(void *p);
   static void deleteArray_S_Cut(void *p);
   static void destruct_S_Cut(void *p);
   static void streamer_S_Cut(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::S_Cut*)
   {
      ::S_Cut *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S_Cut >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S_Cut", ::S_Cut::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 43,
                  typeid(::S_Cut), ::ROOT::DefineBehavior(ptr, ptr),
                  &::S_Cut::Dictionary, isa_proxy, 0,
                  sizeof(::S_Cut) );
      instance.SetNew(&new_S_Cut);
      instance.SetNewArray(&newArray_S_Cut);
      instance.SetDelete(&delete_S_Cut);
      instance.SetDeleteArray(&deleteArray_S_Cut);
      instance.SetDestructor(&destruct_S_Cut);
      instance.SetStreamerFunc(&streamer_S_Cut);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::S_Cut*)
   {
      return GenerateInitInstanceLocal((::S_Cut*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S_Cut*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void S_XCut_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S_XCut(void *p = 0);
   static void *newArray_S_XCut(Long_t size, void *p);
   static void delete_S_XCut(void *p);
   static void deleteArray_S_XCut(void *p);
   static void destruct_S_XCut(void *p);
   static void streamer_S_XCut(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::S_XCut*)
   {
      ::S_XCut *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S_XCut >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S_XCut", ::S_XCut::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 56,
                  typeid(::S_XCut), ::ROOT::DefineBehavior(ptr, ptr),
                  &::S_XCut::Dictionary, isa_proxy, 0,
                  sizeof(::S_XCut) );
      instance.SetNew(&new_S_XCut);
      instance.SetNewArray(&newArray_S_XCut);
      instance.SetDelete(&delete_S_XCut);
      instance.SetDeleteArray(&deleteArray_S_XCut);
      instance.SetDestructor(&destruct_S_XCut);
      instance.SetStreamerFunc(&streamer_S_XCut);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::S_XCut*)
   {
      return GenerateInitInstanceLocal((::S_XCut*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S_XCut*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void S_YCut_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S_YCut(void *p = 0);
   static void *newArray_S_YCut(Long_t size, void *p);
   static void delete_S_YCut(void *p);
   static void deleteArray_S_YCut(void *p);
   static void destruct_S_YCut(void *p);
   static void streamer_S_YCut(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::S_YCut*)
   {
      ::S_YCut *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S_YCut >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S_YCut", ::S_YCut::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 64,
                  typeid(::S_YCut), ::ROOT::DefineBehavior(ptr, ptr),
                  &::S_YCut::Dictionary, isa_proxy, 0,
                  sizeof(::S_YCut) );
      instance.SetNew(&new_S_YCut);
      instance.SetNewArray(&newArray_S_YCut);
      instance.SetDelete(&delete_S_YCut);
      instance.SetDeleteArray(&deleteArray_S_YCut);
      instance.SetDestructor(&destruct_S_YCut);
      instance.SetStreamerFunc(&streamer_S_YCut);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::S_YCut*)
   {
      return GenerateInitInstanceLocal((::S_YCut*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S_YCut*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void S_ZCut_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S_ZCut(void *p = 0);
   static void *newArray_S_ZCut(Long_t size, void *p);
   static void delete_S_ZCut(void *p);
   static void deleteArray_S_ZCut(void *p);
   static void destruct_S_ZCut(void *p);
   static void streamer_S_ZCut(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::S_ZCut*)
   {
      ::S_ZCut *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S_ZCut >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S_ZCut", ::S_ZCut::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 72,
                  typeid(::S_ZCut), ::ROOT::DefineBehavior(ptr, ptr),
                  &::S_ZCut::Dictionary, isa_proxy, 0,
                  sizeof(::S_ZCut) );
      instance.SetNew(&new_S_ZCut);
      instance.SetNewArray(&newArray_S_ZCut);
      instance.SetDelete(&delete_S_ZCut);
      instance.SetDeleteArray(&deleteArray_S_ZCut);
      instance.SetDestructor(&destruct_S_ZCut);
      instance.SetStreamerFunc(&streamer_S_ZCut);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::S_ZCut*)
   {
      return GenerateInitInstanceLocal((::S_ZCut*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S_ZCut*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void SCT_helpers_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SCT_helpers_Dictionary();
   static void *new_SCT_helpers(void *p = 0);
   static void *newArray_SCT_helpers(Long_t size, void *p);
   static void delete_SCT_helpers(void *p);
   static void deleteArray_SCT_helpers(void *p);
   static void destruct_SCT_helpers(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::SCT_helpers*)
   {
      ::SCT_helpers *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SCT_helpers),0);
      static ::ROOT::TGenericClassInfo 
         instance("SCT_helpers", "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 80,
                  typeid(::SCT_helpers), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &SCT_helpers_Dictionary, isa_proxy, 0,
                  sizeof(::SCT_helpers) );
      instance.SetNew(&new_SCT_helpers);
      instance.SetNewArray(&newArray_SCT_helpers);
      instance.SetDelete(&delete_SCT_helpers);
      instance.SetDeleteArray(&deleteArray_SCT_helpers);
      instance.SetDestructor(&destruct_SCT_helpers);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::SCT_helpers*)
   {
      return GenerateInitInstanceLocal((::SCT_helpers*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SCT_helpers*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SCT_helpers_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::SCT_helpers*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void sct_coll_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void sct_coll_Dictionary();
   static void *new_sct_coll(void *p = 0);
   static void *newArray_sct_coll(Long_t size, void *p);
   static void delete_sct_coll(void *p);
   static void deleteArray_sct_coll(void *p);
   static void destruct_sct_coll(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::sct_coll*)
   {
      ::sct_coll *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::sct_coll),0);
      static ::ROOT::TGenericClassInfo 
         instance("sct_coll", "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 87,
                  typeid(::sct_coll), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &sct_coll_Dictionary, isa_proxy, 0,
                  sizeof(::sct_coll) );
      instance.SetNew(&new_sct_coll);
      instance.SetNewArray(&newArray_sct_coll);
      instance.SetDelete(&delete_sct_coll);
      instance.SetDeleteArray(&deleteArray_sct_coll);
      instance.SetDestructor(&destruct_sct_coll);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::sct_coll*)
   {
      return GenerateInitInstanceLocal((::sct_coll*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::sct_coll*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void sct_coll_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::sct_coll*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void sct_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void sct_Dictionary();
   static void *new_sct(void *p = 0);
   static void *newArray_sct(Long_t size, void *p);
   static void delete_sct(void *p);
   static void deleteArray_sct(void *p);
   static void destruct_sct(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::sct*)
   {
      ::sct *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::sct),0);
      static ::ROOT::TGenericClassInfo 
         instance("sct", "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 106,
                  typeid(::sct), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &sct_Dictionary, isa_proxy, 0,
                  sizeof(::sct) );
      instance.SetNew(&new_sct);
      instance.SetNewArray(&newArray_sct);
      instance.SetDelete(&delete_sct);
      instance.SetDeleteArray(&deleteArray_sct);
      instance.SetDestructor(&destruct_sct);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::sct*)
   {
      return GenerateInitInstanceLocal((::sct*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::sct*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void sct_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::sct*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void S_plot_def_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_S_plot_def(void *p);
   static void deleteArray_S_plot_def(void *p);
   static void destruct_S_plot_def(void *p);
   static void streamer_S_plot_def(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::S_plot_def*)
   {
      ::S_plot_def *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S_plot_def >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S_plot_def", ::S_plot_def::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 205,
                  typeid(::S_plot_def), ::ROOT::DefineBehavior(ptr, ptr),
                  &::S_plot_def::Dictionary, isa_proxy, 0,
                  sizeof(::S_plot_def) );
      instance.SetDelete(&delete_S_plot_def);
      instance.SetDeleteArray(&deleteArray_S_plot_def);
      instance.SetDestructor(&destruct_S_plot_def);
      instance.SetStreamerFunc(&streamer_S_plot_def);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::S_plot_def*)
   {
      return GenerateInitInstanceLocal((::S_plot_def*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S_plot_def*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void sct_plot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void sct_plot_Dictionary();
   static void *new_sct_plot(void *p = 0);
   static void *newArray_sct_plot(Long_t size, void *p);
   static void delete_sct_plot(void *p);
   static void deleteArray_sct_plot(void *p);
   static void destruct_sct_plot(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::sct_plot*)
   {
      ::sct_plot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::sct_plot),0);
      static ::ROOT::TGenericClassInfo 
         instance("sct_plot", "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 131,
                  typeid(::sct_plot), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &sct_plot_Dictionary, isa_proxy, 0,
                  sizeof(::sct_plot) );
      instance.SetNew(&new_sct_plot);
      instance.SetNewArray(&newArray_sct_plot);
      instance.SetDelete(&delete_sct_plot);
      instance.SetDeleteArray(&deleteArray_sct_plot);
      instance.SetDestructor(&destruct_sct_plot);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::sct_plot*)
   {
      return GenerateInitInstanceLocal((::sct_plot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::sct_plot*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void sct_plot_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::sct_plot*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void S_treeCollection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_S_treeCollection(void *p);
   static void deleteArray_S_treeCollection(void *p);
   static void destruct_S_treeCollection(void *p);
   static void streamer_S_treeCollection(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::S_treeCollection*)
   {
      ::S_treeCollection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S_treeCollection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S_treeCollection", ::S_treeCollection::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 268,
                  typeid(::S_treeCollection), ::ROOT::DefineBehavior(ptr, ptr),
                  &::S_treeCollection::Dictionary, isa_proxy, 0,
                  sizeof(::S_treeCollection) );
      instance.SetDelete(&delete_S_treeCollection);
      instance.SetDeleteArray(&deleteArray_S_treeCollection);
      instance.SetDestructor(&destruct_S_treeCollection);
      instance.SetStreamerFunc(&streamer_S_treeCollection);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::S_treeCollection*)
   {
      return GenerateInitInstanceLocal((::S_treeCollection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S_treeCollection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void S_Axis_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_S_Axis(void *p);
   static void deleteArray_S_Axis(void *p);
   static void destruct_S_Axis(void *p);
   static void streamer_S_Axis(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::S_Axis*)
   {
      ::S_Axis *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S_Axis >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S_Axis", ::S_Axis::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 250,
                  typeid(::S_Axis), ::ROOT::DefineBehavior(ptr, ptr),
                  &::S_Axis::Dictionary, isa_proxy, 0,
                  sizeof(::S_Axis) );
      instance.SetDelete(&delete_S_Axis);
      instance.SetDeleteArray(&deleteArray_S_Axis);
      instance.SetDestructor(&destruct_S_Axis);
      instance.SetStreamerFunc(&streamer_S_Axis);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::S_Axis*)
   {
      return GenerateInitInstanceLocal((::S_Axis*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S_Axis*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void s_plane_collection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_s_plane_collection(void *p = 0);
   static void *newArray_s_plane_collection(Long_t size, void *p);
   static void delete_s_plane_collection(void *p);
   static void deleteArray_s_plane_collection(void *p);
   static void destruct_s_plane_collection(void *p);
   static void streamer_s_plane_collection(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::s_plane_collection*)
   {
      ::s_plane_collection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::s_plane_collection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("s_plane_collection", ::s_plane_collection::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 190,
                  typeid(::s_plane_collection), ::ROOT::DefineBehavior(ptr, ptr),
                  &::s_plane_collection::Dictionary, isa_proxy, 0,
                  sizeof(::s_plane_collection) );
      instance.SetNew(&new_s_plane_collection);
      instance.SetNewArray(&newArray_s_plane_collection);
      instance.SetDelete(&delete_s_plane_collection);
      instance.SetDeleteArray(&deleteArray_s_plane_collection);
      instance.SetDestructor(&destruct_s_plane_collection);
      instance.SetStreamerFunc(&streamer_s_plane_collection);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::s_plane_collection*)
   {
      return GenerateInitInstanceLocal((::s_plane_collection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::s_plane_collection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void S_plot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S_plot(void *p = 0);
   static void *newArray_S_plot(Long_t size, void *p);
   static void delete_S_plot(void *p);
   static void deleteArray_S_plot(void *p);
   static void destruct_S_plot(void *p);
   static void streamer_S_plot(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::S_plot*)
   {
      ::S_plot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S_plot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S_plot", ::S_plot::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 227,
                  typeid(::S_plot), ::ROOT::DefineBehavior(ptr, ptr),
                  &::S_plot::Dictionary, isa_proxy, 0,
                  sizeof(::S_plot) );
      instance.SetNew(&new_S_plot);
      instance.SetNewArray(&newArray_S_plot);
      instance.SetDelete(&delete_S_plot);
      instance.SetDeleteArray(&deleteArray_S_plot);
      instance.SetDestructor(&destruct_S_plot);
      instance.SetStreamerFunc(&streamer_S_plot);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::S_plot*)
   {
      return GenerateInitInstanceLocal((::S_plot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S_plot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void S_DrawOption_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_S_DrawOption(void *p = 0);
   static void *newArray_S_DrawOption(Long_t size, void *p);
   static void delete_S_DrawOption(void *p);
   static void deleteArray_S_DrawOption(void *p);
   static void destruct_S_DrawOption(void *p);
   static void streamer_S_DrawOption(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::S_DrawOption*)
   {
      ::S_DrawOption *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S_DrawOption >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S_DrawOption", ::S_DrawOption::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 260,
                  typeid(::S_DrawOption), ::ROOT::DefineBehavior(ptr, ptr),
                  &::S_DrawOption::Dictionary, isa_proxy, 0,
                  sizeof(::S_DrawOption) );
      instance.SetNew(&new_S_DrawOption);
      instance.SetNewArray(&newArray_S_DrawOption);
      instance.SetDelete(&delete_S_DrawOption);
      instance.SetDeleteArray(&deleteArray_S_DrawOption);
      instance.SetDestructor(&destruct_S_DrawOption);
      instance.SetStreamerFunc(&streamer_S_DrawOption);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::S_DrawOption*)
   {
      return GenerateInitInstanceLocal((::S_DrawOption*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S_DrawOption*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void S_plot_collection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_S_plot_collection(void *p);
   static void deleteArray_S_plot_collection(void *p);
   static void destruct_S_plot_collection(void *p);
   static void streamer_S_plot_collection(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::S_plot_collection*)
   {
      ::S_plot_collection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::S_plot_collection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("S_plot_collection", ::S_plot_collection::Class_Version(), "/Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/sct_plot/inc/sct_plots.h", 284,
                  typeid(::S_plot_collection), ::ROOT::DefineBehavior(ptr, ptr),
                  &::S_plot_collection::Dictionary, isa_proxy, 0,
                  sizeof(::S_plot_collection) );
      instance.SetDelete(&delete_S_plot_collection);
      instance.SetDeleteArray(&deleteArray_S_plot_collection);
      instance.SetDestructor(&destruct_S_plot_collection);
      instance.SetStreamerFunc(&streamer_S_plot_collection);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::S_plot_collection*)
   {
      return GenerateInitInstanceLocal((::S_plot_collection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::S_plot_collection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr S_plane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *S_plane::Class_Name()
{
   return "S_plane";
}

//______________________________________________________________________________
const char *S_plane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_plane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S_plane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_plane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S_plane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_plane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S_plane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_plane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr S_Cut::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *S_Cut::Class_Name()
{
   return "S_Cut";
}

//______________________________________________________________________________
const char *S_Cut::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_Cut*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S_Cut::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_Cut*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S_Cut::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_Cut*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S_Cut::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_Cut*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr S_XCut::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *S_XCut::Class_Name()
{
   return "S_XCut";
}

//______________________________________________________________________________
const char *S_XCut::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_XCut*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S_XCut::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_XCut*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S_XCut::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_XCut*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S_XCut::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_XCut*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr S_YCut::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *S_YCut::Class_Name()
{
   return "S_YCut";
}

//______________________________________________________________________________
const char *S_YCut::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_YCut*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S_YCut::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_YCut*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S_YCut::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_YCut*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S_YCut::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_YCut*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr S_ZCut::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *S_ZCut::Class_Name()
{
   return "S_ZCut";
}

//______________________________________________________________________________
const char *S_ZCut::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_ZCut*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S_ZCut::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_ZCut*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S_ZCut::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_ZCut*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S_ZCut::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_ZCut*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr S_plot_def::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *S_plot_def::Class_Name()
{
   return "S_plot_def";
}

//______________________________________________________________________________
const char *S_plot_def::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot_def*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S_plot_def::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot_def*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S_plot_def::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot_def*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S_plot_def::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot_def*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr S_treeCollection::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *S_treeCollection::Class_Name()
{
   return "S_treeCollection";
}

//______________________________________________________________________________
const char *S_treeCollection::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_treeCollection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S_treeCollection::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_treeCollection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S_treeCollection::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_treeCollection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S_treeCollection::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_treeCollection*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr S_Axis::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *S_Axis::Class_Name()
{
   return "S_Axis";
}

//______________________________________________________________________________
const char *S_Axis::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_Axis*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S_Axis::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_Axis*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S_Axis::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_Axis*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S_Axis::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_Axis*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr s_plane_collection::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *s_plane_collection::Class_Name()
{
   return "s_plane_collection";
}

//______________________________________________________________________________
const char *s_plane_collection::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::s_plane_collection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int s_plane_collection::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::s_plane_collection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void s_plane_collection::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::s_plane_collection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *s_plane_collection::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::s_plane_collection*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr S_plot::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *S_plot::Class_Name()
{
   return "S_plot";
}

//______________________________________________________________________________
const char *S_plot::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S_plot::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S_plot::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S_plot::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr S_DrawOption::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *S_DrawOption::Class_Name()
{
   return "S_DrawOption";
}

//______________________________________________________________________________
const char *S_DrawOption::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_DrawOption*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S_DrawOption::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_DrawOption*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S_DrawOption::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_DrawOption*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S_DrawOption::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_DrawOption*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr S_plot_collection::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *S_plot_collection::Class_Name()
{
   return "S_plot_collection";
}

//______________________________________________________________________________
const char *S_plot_collection::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot_collection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int S_plot_collection::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot_collection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void S_plot_collection::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot_collection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *S_plot_collection::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::S_plot_collection*)0x0)->GetClass();} }
   return fgIsA;
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_sct(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::sct : new ::sct;
   }
   static void *newArray_sct(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::sct[nElements] : new ::sct[nElements];
   }
   // Wrapper around operator delete
   static void delete_sct(void *p) {
      delete ((::sct*)p);
   }
   static void deleteArray_sct(void *p) {
      delete [] ((::sct*)p);
   }
   static void destruct_sct(void *p) {
      typedef ::sct current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::sct

//______________________________________________________________________________
void S_plot_collection::Streamer(TBuffer &R__b)
{
   // Stream an object of class S_plot_collection.

   ::Error("S_plot_collection::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void S_plot_collection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S_plot_collection.
      TClass *R__cl = ::S_plot_collection::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_S_plot_collection(void *p) {
      delete ((::S_plot_collection*)p);
   }
   static void deleteArray_S_plot_collection(void *p) {
      delete [] ((::S_plot_collection*)p);
   }
   static void destruct_S_plot_collection(void *p) {
      typedef ::S_plot_collection current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_S_plot_collection(TBuffer &buf, void *obj) {
      ((::S_plot_collection*)obj)->::S_plot_collection::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::S_plot_collection

//______________________________________________________________________________
void S_DrawOption::Streamer(TBuffer &R__b)
{
   // Stream an object of class S_DrawOption.

   ::Error("S_DrawOption::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void S_DrawOption::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S_DrawOption.
      TClass *R__cl = ::S_DrawOption::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_options", &m_options);
      R__insp.InspectMember(m_options, "m_options.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_cuts", &m_cuts);
      R__insp.InspectMember(m_cuts, "m_cuts.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_axis", &m_axis);
      R__insp.InspectMember(m_axis, "m_axis.");
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_S_DrawOption(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_DrawOption : new ::S_DrawOption;
   }
   static void *newArray_S_DrawOption(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_DrawOption[nElements] : new ::S_DrawOption[nElements];
   }
   // Wrapper around operator delete
   static void delete_S_DrawOption(void *p) {
      delete ((::S_DrawOption*)p);
   }
   static void deleteArray_S_DrawOption(void *p) {
      delete [] ((::S_DrawOption*)p);
   }
   static void destruct_S_DrawOption(void *p) {
      typedef ::S_DrawOption current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_S_DrawOption(TBuffer &buf, void *obj) {
      ((::S_DrawOption*)obj)->::S_DrawOption::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::S_DrawOption

//______________________________________________________________________________
void S_Axis::Streamer(TBuffer &R__b)
{
   // Stream an object of class S_Axis.

   ::Error("S_Axis::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void S_Axis::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S_Axis.
      TClass *R__cl = ::S_Axis::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_collectionName", &m_collectionName);
      R__insp.InspectMember(m_collectionName, "m_collectionName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_planeID", &m_planeID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_axis", &m_axis);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_S_Axis(void *p) {
      delete ((::S_Axis*)p);
   }
   static void deleteArray_S_Axis(void *p) {
      delete [] ((::S_Axis*)p);
   }
   static void destruct_S_Axis(void *p) {
      typedef ::S_Axis current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_S_Axis(TBuffer &buf, void *obj) {
      ((::S_Axis*)obj)->::S_Axis::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::S_Axis

//______________________________________________________________________________
void S_plot::Streamer(TBuffer &R__b)
{
   // Stream an object of class S_plot.

   ::Error("S_plot::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void S_plot::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S_plot.
      TClass *R__cl = ::S_plot::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_S_plot(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_plot : new ::S_plot;
   }
   static void *newArray_S_plot(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_plot[nElements] : new ::S_plot[nElements];
   }
   // Wrapper around operator delete
   static void delete_S_plot(void *p) {
      delete ((::S_plot*)p);
   }
   static void deleteArray_S_plot(void *p) {
      delete [] ((::S_plot*)p);
   }
   static void destruct_S_plot(void *p) {
      typedef ::S_plot current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_S_plot(TBuffer &buf, void *obj) {
      ((::S_plot*)obj)->::S_plot::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::S_plot

//______________________________________________________________________________
void S_plane::Streamer(TBuffer &R__b)
{
   // Stream an object of class S_plane.

   ::Error("S_plane::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void S_plane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S_plane.
      TClass *R__cl = ::S_plane::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_S_plane(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_plane : new ::S_plane;
   }
   static void *newArray_S_plane(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_plane[nElements] : new ::S_plane[nElements];
   }
   // Wrapper around operator delete
   static void delete_S_plane(void *p) {
      delete ((::S_plane*)p);
   }
   static void deleteArray_S_plane(void *p) {
      delete [] ((::S_plane*)p);
   }
   static void destruct_S_plane(void *p) {
      typedef ::S_plane current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_S_plane(TBuffer &buf, void *obj) {
      ((::S_plane*)obj)->::S_plane::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::S_plane

//______________________________________________________________________________
void S_treeCollection::Streamer(TBuffer &R__b)
{
   // Stream an object of class S_treeCollection.

   ::Error("S_treeCollection::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void S_treeCollection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S_treeCollection.
      TClass *R__cl = ::S_treeCollection::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_S_treeCollection(void *p) {
      delete ((::S_treeCollection*)p);
   }
   static void deleteArray_S_treeCollection(void *p) {
      delete [] ((::S_treeCollection*)p);
   }
   static void destruct_S_treeCollection(void *p) {
      typedef ::S_treeCollection current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_S_treeCollection(TBuffer &buf, void *obj) {
      ((::S_treeCollection*)obj)->::S_treeCollection::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::S_treeCollection

//______________________________________________________________________________
void S_plot_def::Streamer(TBuffer &R__b)
{
   // Stream an object of class S_plot_def.

   ::Error("S_plot_def::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void S_plot_def::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S_plot_def.
      TClass *R__cl = ::S_plot_def::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_S_plot_def(void *p) {
      delete ((::S_plot_def*)p);
   }
   static void deleteArray_S_plot_def(void *p) {
      delete [] ((::S_plot_def*)p);
   }
   static void destruct_S_plot_def(void *p) {
      typedef ::S_plot_def current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_S_plot_def(TBuffer &buf, void *obj) {
      ((::S_plot_def*)obj)->::S_plot_def::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::S_plot_def

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_sct_plot(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::sct_plot : new ::sct_plot;
   }
   static void *newArray_sct_plot(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::sct_plot[nElements] : new ::sct_plot[nElements];
   }
   // Wrapper around operator delete
   static void delete_sct_plot(void *p) {
      delete ((::sct_plot*)p);
   }
   static void deleteArray_sct_plot(void *p) {
      delete [] ((::sct_plot*)p);
   }
   static void destruct_sct_plot(void *p) {
      typedef ::sct_plot current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::sct_plot

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_sct_coll(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::sct_coll : new ::sct_coll;
   }
   static void *newArray_sct_coll(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::sct_coll[nElements] : new ::sct_coll[nElements];
   }
   // Wrapper around operator delete
   static void delete_sct_coll(void *p) {
      delete ((::sct_coll*)p);
   }
   static void deleteArray_sct_coll(void *p) {
      delete [] ((::sct_coll*)p);
   }
   static void destruct_sct_coll(void *p) {
      typedef ::sct_coll current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::sct_coll

//______________________________________________________________________________
void s_plane_collection::Streamer(TBuffer &R__b)
{
   // Stream an object of class s_plane_collection.

   ::Error("s_plane_collection::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void s_plane_collection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class s_plane_collection.
      TClass *R__cl = ::s_plane_collection::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_s_plane_collection(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::s_plane_collection : new ::s_plane_collection;
   }
   static void *newArray_s_plane_collection(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::s_plane_collection[nElements] : new ::s_plane_collection[nElements];
   }
   // Wrapper around operator delete
   static void delete_s_plane_collection(void *p) {
      delete ((::s_plane_collection*)p);
   }
   static void deleteArray_s_plane_collection(void *p) {
      delete [] ((::s_plane_collection*)p);
   }
   static void destruct_s_plane_collection(void *p) {
      typedef ::s_plane_collection current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_s_plane_collection(TBuffer &buf, void *obj) {
      ((::s_plane_collection*)obj)->::s_plane_collection::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::s_plane_collection

//______________________________________________________________________________
void S_Cut::Streamer(TBuffer &R__b)
{
   // Stream an object of class S_Cut.

   ::Error("S_Cut::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void S_Cut::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S_Cut.
      TClass *R__cl = ::S_Cut::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_min", &m_min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_max", &m_max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_cut_min", &m_cut_min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_cut_max", &m_cut_max);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_S_Cut(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_Cut : new ::S_Cut;
   }
   static void *newArray_S_Cut(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_Cut[nElements] : new ::S_Cut[nElements];
   }
   // Wrapper around operator delete
   static void delete_S_Cut(void *p) {
      delete ((::S_Cut*)p);
   }
   static void deleteArray_S_Cut(void *p) {
      delete [] ((::S_Cut*)p);
   }
   static void destruct_S_Cut(void *p) {
      typedef ::S_Cut current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_S_Cut(TBuffer &buf, void *obj) {
      ((::S_Cut*)obj)->::S_Cut::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::S_Cut

//______________________________________________________________________________
void S_XCut::Streamer(TBuffer &R__b)
{
   // Stream an object of class S_XCut.

   S_Cut::Streamer(R__b);
}

//______________________________________________________________________________
void S_XCut::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S_XCut.
      TClass *R__cl = ::S_XCut::IsA();
      if (R__cl || R__insp.IsA()) { }
      S_Cut::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_S_XCut(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_XCut : new ::S_XCut;
   }
   static void *newArray_S_XCut(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_XCut[nElements] : new ::S_XCut[nElements];
   }
   // Wrapper around operator delete
   static void delete_S_XCut(void *p) {
      delete ((::S_XCut*)p);
   }
   static void deleteArray_S_XCut(void *p) {
      delete [] ((::S_XCut*)p);
   }
   static void destruct_S_XCut(void *p) {
      typedef ::S_XCut current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_S_XCut(TBuffer &buf, void *obj) {
      ((::S_XCut*)obj)->::S_XCut::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::S_XCut

//______________________________________________________________________________
void S_YCut::Streamer(TBuffer &R__b)
{
   // Stream an object of class S_YCut.

   S_Cut::Streamer(R__b);
}

//______________________________________________________________________________
void S_YCut::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S_YCut.
      TClass *R__cl = ::S_YCut::IsA();
      if (R__cl || R__insp.IsA()) { }
      S_Cut::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_S_YCut(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_YCut : new ::S_YCut;
   }
   static void *newArray_S_YCut(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_YCut[nElements] : new ::S_YCut[nElements];
   }
   // Wrapper around operator delete
   static void delete_S_YCut(void *p) {
      delete ((::S_YCut*)p);
   }
   static void deleteArray_S_YCut(void *p) {
      delete [] ((::S_YCut*)p);
   }
   static void destruct_S_YCut(void *p) {
      typedef ::S_YCut current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_S_YCut(TBuffer &buf, void *obj) {
      ((::S_YCut*)obj)->::S_YCut::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::S_YCut

//______________________________________________________________________________
void S_ZCut::Streamer(TBuffer &R__b)
{
   // Stream an object of class S_ZCut.

   S_Cut::Streamer(R__b);
}

//______________________________________________________________________________
void S_ZCut::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class S_ZCut.
      TClass *R__cl = ::S_ZCut::IsA();
      if (R__cl || R__insp.IsA()) { }
      S_Cut::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_S_ZCut(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_ZCut : new ::S_ZCut;
   }
   static void *newArray_S_ZCut(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::S_ZCut[nElements] : new ::S_ZCut[nElements];
   }
   // Wrapper around operator delete
   static void delete_S_ZCut(void *p) {
      delete ((::S_ZCut*)p);
   }
   static void deleteArray_S_ZCut(void *p) {
      delete [] ((::S_ZCut*)p);
   }
   static void destruct_S_ZCut(void *p) {
      typedef ::S_ZCut current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_S_ZCut(TBuffer &buf, void *obj) {
      ((::S_ZCut*)obj)->::S_ZCut::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::S_ZCut

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_SCT_helpers(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SCT_helpers : new ::SCT_helpers;
   }
   static void *newArray_SCT_helpers(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SCT_helpers[nElements] : new ::SCT_helpers[nElements];
   }
   // Wrapper around operator delete
   static void delete_SCT_helpers(void *p) {
      delete ((::SCT_helpers*)p);
   }
   static void deleteArray_SCT_helpers(void *p) {
      delete [] ((::SCT_helpers*)p);
   }
   static void destruct_SCT_helpers(void *p) {
      typedef ::SCT_helpers current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::SCT_helpers

/********************************************************
* /Users/lucreziastellabruni/Dropbox/SCt_correlations/SCT_correlations/buildRoot5/sct_plot/SCT_plotsDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSCT_plotsDict();

extern "C" void G__set_cpp_environmentSCT_plotsDict() {
  G__cpp_reset_tagtableSCT_plotsDict();
}
#include <new>
extern "C" int G__cpp_dllrevSCT_plotsDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* S_plane */
static int G__SCT_plotsDict_527_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plane* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_plane[n];
     } else {
       p = new((void*) gvp) S_plane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_plane;
     } else {
       p = new((void*) gvp) S_plane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_plane((double) G__double(libp->para[0]), (S_treeCollection*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) S_plane((double) G__double(libp->para[0]), (S_treeCollection*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_plane((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) S_plane((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const S_plane*) G__getstructoffset())->isSetTreeCollectionSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plane*) G__getstructoffset())->setTreeCollection((S_treeCollection*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const S_plane*) G__getstructoffset())->getName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((S_plane*) G__getstructoffset())->next());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const plane_hit* pobj;
         const plane_hit xobj = ((const S_plane*) G__getstructoffset())->get();
         pobj = new plane_hit(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const S_Axis* pobj;
         const S_Axis xobj = ((const S_plane*) G__getstructoffset())->getX_def();
         pobj = new S_Axis(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const S_Axis* pobj;
         const S_Axis xobj = ((const S_plane*) G__getstructoffset())->getY_def();
         pobj = new S_Axis(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const S_plane*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const S_plane*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S_plane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S_plane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S_plane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const S_plane*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plane*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plane*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_plane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_527_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_plane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_527_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S_plane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S_plane(*(S_plane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S_plane G__TS_plane;
static int G__SCT_plotsDict_527_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S_plane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S_plane*) (soff+(sizeof(S_plane)*i)))->~G__TS_plane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S_plane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S_plane*) (soff))->~G__TS_plane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_527_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plane* dest = (S_plane*) G__getstructoffset();
   *dest = *(S_plane*) libp->para[0].ref;
   const S_plane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S_Cut */
static int G__SCT_plotsDict_528_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_Cut* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_Cut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) S_Cut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_Cut* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_Cut((Double_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) S_Cut((Double_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_Cut* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_Cut[n];
     } else {
       p = new((void*) gvp) S_Cut[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_Cut;
     } else {
       p = new((void*) gvp) S_Cut;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((S_Cut*) G__getstructoffset())->isOutOfRange((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S_Cut::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_Cut::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S_Cut::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S_Cut::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const S_Cut*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_Cut*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_Cut*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_Cut*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_Cut::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_Cut::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_Cut::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_528_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_Cut::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_528_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S_Cut* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S_Cut(*(S_Cut*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S_Cut G__TS_Cut;
static int G__SCT_plotsDict_528_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S_Cut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S_Cut*) (soff+(sizeof(S_Cut)*i)))->~G__TS_Cut();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S_Cut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S_Cut*) (soff))->~G__TS_Cut();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_528_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_Cut* dest = (S_Cut*) G__getstructoffset();
   *dest = *(S_Cut*) libp->para[0].ref;
   const S_Cut& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S_XCut */
static int G__SCT_plotsDict_529_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_XCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_XCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) S_XCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_529_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_XCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_XCut((Double_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) S_XCut((Double_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_529_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_XCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_XCut[n];
     } else {
       p = new((void*) gvp) S_XCut[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_XCut;
     } else {
       p = new((void*) gvp) S_XCut;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_529_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S_XCut::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_529_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_XCut::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_529_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S_XCut::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_529_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S_XCut::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_529_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_XCut*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_529_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_XCut::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_529_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_XCut::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_529_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_XCut::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_529_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_XCut::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_529_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S_XCut* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S_XCut(*(S_XCut*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S_XCut G__TS_XCut;
static int G__SCT_plotsDict_529_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S_XCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S_XCut*) (soff+(sizeof(S_XCut)*i)))->~G__TS_XCut();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S_XCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S_XCut*) (soff))->~G__TS_XCut();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_529_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_XCut* dest = (S_XCut*) G__getstructoffset();
   *dest = *(S_XCut*) libp->para[0].ref;
   const S_XCut& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S_YCut */
static int G__SCT_plotsDict_530_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_YCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_YCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) S_YCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_530_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_YCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_YCut((Double_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) S_YCut((Double_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_530_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_YCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_YCut[n];
     } else {
       p = new((void*) gvp) S_YCut[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_YCut;
     } else {
       p = new((void*) gvp) S_YCut;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_530_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S_YCut::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_530_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_YCut::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_530_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S_YCut::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_530_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S_YCut::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_530_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_YCut*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_530_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_YCut::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_530_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_YCut::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_530_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_YCut::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_530_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_YCut::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_530_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S_YCut* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S_YCut(*(S_YCut*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S_YCut G__TS_YCut;
static int G__SCT_plotsDict_530_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S_YCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S_YCut*) (soff+(sizeof(S_YCut)*i)))->~G__TS_YCut();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S_YCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S_YCut*) (soff))->~G__TS_YCut();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_530_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_YCut* dest = (S_YCut*) G__getstructoffset();
   *dest = *(S_YCut*) libp->para[0].ref;
   const S_YCut& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S_ZCut */
static int G__SCT_plotsDict_531_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_ZCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_ZCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) S_ZCut((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_531_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_ZCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_ZCut((Double_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) S_ZCut((Double_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_531_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_ZCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_ZCut[n];
     } else {
       p = new((void*) gvp) S_ZCut[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_ZCut;
     } else {
       p = new((void*) gvp) S_ZCut;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_531_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S_ZCut::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_531_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_ZCut::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_531_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S_ZCut::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_531_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S_ZCut::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_531_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_ZCut*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_531_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_ZCut::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_531_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_ZCut::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_531_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_ZCut::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_531_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_ZCut::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_531_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S_ZCut* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S_ZCut(*(S_ZCut*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S_ZCut G__TS_ZCut;
static int G__SCT_plotsDict_531_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S_ZCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S_ZCut*) (soff+(sizeof(S_ZCut)*i)))->~G__TS_ZCut();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S_ZCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S_ZCut*) (soff))->~G__TS_ZCut();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_531_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_ZCut* dest = (S_ZCut*) G__getstructoffset();
   *dest = *(S_ZCut*) libp->para[0].ref;
   const S_ZCut& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SCT_helpers */
static int G__SCT_plotsDict_533_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SCT_helpers::CutTH2((TH2*) G__int(libp->para[0]), *((S_XCut*) G__int(libp->para[1]))
, *((S_YCut*) G__int(libp->para[2])), *((S_ZCut*) G__int(libp->para[3])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_533_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SCT_helpers::CutTH2((TH2*) G__int(libp->para[0]), *((S_ZCut*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__SCT_plotsDict_533_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SCT_helpers *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCT_helpers[n];
     } else {
       p = new((void*) gvp) SCT_helpers[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCT_helpers;
     } else {
       p = new((void*) gvp) SCT_helpers;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_SCT_helpers));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_533_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SCT_helpers* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SCT_helpers(*(SCT_helpers*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_SCT_helpers));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SCT_helpers G__TSCT_helpers;
static int G__SCT_plotsDict_533_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SCT_helpers*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SCT_helpers*) (soff+(sizeof(SCT_helpers)*i)))->~G__TSCT_helpers();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SCT_helpers*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SCT_helpers*) (soff))->~G__TSCT_helpers();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_533_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SCT_helpers* dest = (SCT_helpers*) G__getstructoffset();
   const SCT_helpers& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* sct_coll */
static int G__SCT_plotsDict_534_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::apix_hit_local();
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::apix_hit();
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::apix_zs_data();
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::apix_fitted();
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::apix_fitted_local();
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::DUT_hit_local();
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::DUT_hit();
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::DUT_zs_data();
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::DUT_fitted();
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::DUT_fitted_local();
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::tel_hit_local((double) G__double(libp->para[0]));
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::tel_hit((double) G__double(libp->para[0]));
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::tel_zs_data((double) G__double(libp->para[0]));
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::tel_fitted((double) G__double(libp->para[0]));
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_534_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = sct_coll::tel_fitted_local((double) G__double(libp->para[0]));
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__SCT_plotsDict_534_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sct_coll *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sct_coll[n];
     } else {
       p = new((void*) gvp) sct_coll[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sct_coll;
     } else {
       p = new((void*) gvp) sct_coll;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_coll));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_534_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   sct_coll* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new sct_coll(*(sct_coll*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_coll));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef sct_coll G__Tsct_coll;
static int G__SCT_plotsDict_534_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (sct_coll*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((sct_coll*) (soff+(sizeof(sct_coll)*i)))->~G__Tsct_coll();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (sct_coll*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((sct_coll*) (soff))->~G__Tsct_coll();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_534_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sct_coll* dest = (sct_coll*) G__getstructoffset();
   const sct_coll& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* sct */
static int G__SCT_plotsDict_535_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::col_hit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::col_zsdata_strip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::col_zsdata_m26());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::col_zsdata_apix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::col_fitpoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::col_fitpoints_local());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::col_local_hit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_hitmap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_correlation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_residual());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_clusterSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_projectOnPixel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_find_correspondingX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_find_correspondingXY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_Event_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_find_nearest());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_plane_distance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_find_nearest_strip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_A_if_B());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_rotated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_535_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) sct::plot_coordinate_transform());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__SCT_plotsDict_535_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sct *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sct[n];
     } else {
       p = new((void*) gvp) sct[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sct;
     } else {
       p = new((void*) gvp) sct;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_sct));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_535_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   sct* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new sct(*(sct*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_sct));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef sct G__Tsct;
static int G__SCT_plotsDict_535_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (sct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((sct*) (soff+(sizeof(sct)*i)))->~G__Tsct();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (sct*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((sct*) (soff))->~G__Tsct();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_535_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sct* dest = (sct*) G__getstructoffset();
   const sct& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S_plot_def */
static int G__SCT_plotsDict_536_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plot_def* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_plot_def(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) S_plot_def(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_plot_def((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) S_plot_def((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot_def*) G__getstructoffset())->setParameter((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((S_plot_def*) G__getstructoffset())->getParameter((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S_plot_def::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plot_def::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S_plot_def::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S_plot_def::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const S_plot_def*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot_def*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot_def*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot_def*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plot_def::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_plot_def::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plot_def::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_536_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_plot_def::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_536_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S_plot_def* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S_plot_def(*(S_plot_def*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S_plot_def G__TS_plot_def;
static int G__SCT_plotsDict_536_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S_plot_def*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S_plot_def*) (soff+(sizeof(S_plot_def)*i)))->~G__TS_plot_def();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S_plot_def*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S_plot_def*) (soff))->~G__TS_plot_def();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_536_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plot_def* dest = (S_plot_def*) G__getstructoffset();
   *dest = *(S_plot_def*) libp->para[0].ref;
   const S_plot_def& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* sct_plot */
static int G__SCT_plotsDict_537_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_hitmap((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_hitmap((const char*) G__int(libp->para[0]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_correlation((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_correlation((const char*) G__int(libp->para[0]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_residual((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_residual((const char*) G__int(libp->para[0]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_clustering((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (bool) G__int(libp->para[2]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_clustering((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_clustering((const char*) G__int(libp->para[0]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_projectOnPixel((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_projectOnPixel((const char*) G__int(libp->para[0]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_find_correspondingX((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_find_correspondingX((const char*) G__int(libp->para[0]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_find_correspondingXY((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_find_correspondingXY((const char*) G__int(libp->para[0]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_Event_size((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_Event_size((const char*) G__int(libp->para[0]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_find_nearest((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (bool) G__int(libp->para[3]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_find_nearest((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_find_nearest_strip((const char*) G__int(libp->para[0]), (axis_def) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (bool) G__int(libp->para[3]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_find_nearest_strip((const char*) G__int(libp->para[0]), (axis_def) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_find_nearest_strip((const char*) G__int(libp->para[0]), (axis_def) G__int(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_plane_distance((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_plane_distance((const char*) G__int(libp->para[0]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_A_if_B((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_A_if_B((const char*) G__int(libp->para[0]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_rotated((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (bool) G__int(libp->para[2]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_rotated((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_537_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_coordinate_transform((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (bool) G__int(libp->para[5]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 5:
      {
         S_plot_def* pobj;
         S_plot_def xobj = sct_plot::s_coordinate_transform((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
         pobj = new S_plot_def(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__SCT_plotsDict_537_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sct_plot *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sct_plot[n];
     } else {
       p = new((void*) gvp) sct_plot[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new sct_plot;
     } else {
       p = new((void*) gvp) sct_plot;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_plot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_537_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   sct_plot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new sct_plot(*(sct_plot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_plot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef sct_plot G__Tsct_plot;
static int G__SCT_plotsDict_537_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (sct_plot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((sct_plot*) (soff+(sizeof(sct_plot)*i)))->~G__Tsct_plot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (sct_plot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((sct_plot*) (soff))->~G__Tsct_plot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_537_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   sct_plot* dest = (sct_plot*) G__getstructoffset();
   const sct_plot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S_treeCollection */
static int G__SCT_plotsDict_542_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_treeCollection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_treeCollection((TTree*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) S_treeCollection((TTree*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_treeCollection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((S_treeCollection*) G__getstructoffset())->GetEntry((Long64_t) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const S_treeCollection*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S_treeCollection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_treeCollection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S_treeCollection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S_treeCollection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const S_treeCollection*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_treeCollection*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_treeCollection*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_treeCollection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_treeCollection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_treeCollection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_treeCollection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_542_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_treeCollection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_542_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S_treeCollection* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S_treeCollection(*(S_treeCollection*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_treeCollection));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S_treeCollection G__TS_treeCollection;
static int G__SCT_plotsDict_542_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S_treeCollection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S_treeCollection*) (soff+(sizeof(S_treeCollection)*i)))->~G__TS_treeCollection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S_treeCollection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S_treeCollection*) (soff))->~G__TS_treeCollection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_542_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_treeCollection* dest = (S_treeCollection*) G__getstructoffset();
   *dest = *(S_treeCollection*) libp->para[0].ref;
   const S_treeCollection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S_Axis */
static int G__SCT_plotsDict_543_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_Axis* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_Axis(
(const char*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (axis_def) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) S_Axis(
(const char*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (axis_def) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Axis));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S_Axis::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_Axis::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S_Axis::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S_Axis::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const S_Axis*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_Axis*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_Axis*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_Axis*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_Axis::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_Axis::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_Axis::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_543_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_Axis::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_543_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S_Axis* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S_Axis(*(S_Axis*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Axis));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S_Axis G__TS_Axis;
static int G__SCT_plotsDict_543_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S_Axis*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S_Axis*) (soff+(sizeof(S_Axis)*i)))->~G__TS_Axis();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S_Axis*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S_Axis*) (soff))->~G__TS_Axis();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_543_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_Axis* dest = (S_Axis*) G__getstructoffset();
   *dest = *(S_Axis*) libp->para[0].ref;
   const S_Axis& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* s_plane_collection */
static int G__SCT_plotsDict_545_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   s_plane_collection* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new s_plane_collection[n];
     } else {
       p = new((void*) gvp) s_plane_collection[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new s_plane_collection;
     } else {
       p = new((void*) gvp) s_plane_collection;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = ((s_plane_collection*) G__getstructoffset())->get((Int_t) G__int(libp->para[0]));
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = ((s_plane_collection*) G__getstructoffset())->get((const char*) G__int(libp->para[0]));
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         S_plane* pobj;
         S_plane xobj = ((s_plane_collection*) G__getstructoffset())->operator()();
         pobj = new S_plane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((s_plane_collection*) G__getstructoffset())->getName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const s_plane_collection*) G__getstructoffset())->showNames();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const s_plane_collection*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) s_plane_collection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) s_plane_collection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) s_plane_collection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      s_plane_collection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const s_plane_collection*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((s_plane_collection*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((s_plane_collection*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((s_plane_collection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) s_plane_collection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) s_plane_collection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) s_plane_collection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_545_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) s_plane_collection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_545_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   s_plane_collection* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new s_plane_collection(*(s_plane_collection*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef s_plane_collection G__Ts_plane_collection;
static int G__SCT_plotsDict_545_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (s_plane_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((s_plane_collection*) (soff+(sizeof(s_plane_collection)*i)))->~G__Ts_plane_collection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (s_plane_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((s_plane_collection*) (soff))->~G__Ts_plane_collection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_545_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   s_plane_collection* dest = (s_plane_collection*) G__getstructoffset();
   *dest = *(s_plane_collection*) libp->para[0].ref;
   const s_plane_collection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S_plot */
static int G__SCT_plotsDict_546_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plot* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_plot[n];
     } else {
       p = new((void*) gvp) S_plot[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_plot;
     } else {
       p = new((void*) gvp) S_plot;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plot* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_plot(*(S_plot*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) S_plot(*(S_plot*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plot* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_plot(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (axis_ref*) G__int(libp->para[2]), (axis_ref*) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) S_plot(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (axis_ref*) G__int(libp->para[2]), (axis_ref*) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plot* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_plot(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (S_plane*) G__int(libp->para[2]), (S_plane*) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) S_plot(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (S_plane*) G__int(libp->para[2]), (S_plane*) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plot* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_plot(
*(S_plot_def*) libp->para[0].ref, (S_plane*) G__int(libp->para[1])
, (S_plane*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) S_plot(
*(S_plot_def*) libp->para[0].ref, (S_plane*) G__int(libp->para[1])
, (S_plane*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plot* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_plot(
*(S_plot_def*) libp->para[0].ref, (axis_ref*) G__int(libp->para[1])
, (axis_ref*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) S_plot(
*(S_plot_def*) libp->para[0].ref, (axis_ref*) G__int(libp->para[1])
, (axis_ref*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot*) G__getstructoffset())->fill();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letLonglong(result7, 110, (G__int64) ((S_plot*) G__getstructoffset())->Draw((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letLonglong(result7, 110, (G__int64) ((S_plot*) G__getstructoffset())->Draw((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letLonglong(result7, 110, (G__int64) ((S_plot*) G__getstructoffset())->Draw((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         s_plane_collection* pobj;
         s_plane_collection xobj = ((S_plot*) G__getstructoffset())->getOutputcollection();
         pobj = new s_plane_collection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S_plot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S_plot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S_plot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const S_plot*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_plot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_546_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_plot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S_plot G__TS_plot;
static int G__SCT_plotsDict_546_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S_plot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S_plot*) (soff+(sizeof(S_plot)*i)))->~G__TS_plot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S_plot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S_plot*) (soff))->~G__TS_plot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_546_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plot* dest = (S_plot*) G__getstructoffset();
   *dest = *(S_plot*) libp->para[0].ref;
   const S_plot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S_DrawOption */
static int G__SCT_plotsDict_547_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_DrawOption* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_DrawOption(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) S_DrawOption(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_DrawOption((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) S_DrawOption((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new S_DrawOption((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) S_DrawOption((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new S_DrawOption[n];
       } else {
         p = new((void*) gvp) S_DrawOption[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new S_DrawOption;
       } else {
         p = new((void*) gvp) S_DrawOption;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_DrawOption));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S_DrawOption::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_DrawOption::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S_DrawOption::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S_DrawOption::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const S_DrawOption*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_DrawOption*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_DrawOption*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_DrawOption*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_DrawOption::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_DrawOption::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_DrawOption::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_547_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_DrawOption::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_547_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S_DrawOption* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S_DrawOption(*(S_DrawOption*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_DrawOption));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S_DrawOption G__TS_DrawOption;
static int G__SCT_plotsDict_547_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S_DrawOption*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S_DrawOption*) (soff+(sizeof(S_DrawOption)*i)))->~G__TS_DrawOption();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S_DrawOption*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S_DrawOption*) (soff))->~G__TS_DrawOption();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_547_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_DrawOption* dest = (S_DrawOption*) G__getstructoffset();
   *dest = *(S_DrawOption*) libp->para[0].ref;
   const S_DrawOption& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* S_plot_collection */
static int G__SCT_plotsDict_548_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plot_collection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new S_plot_collection((TFile*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) S_plot_collection((TFile*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot_collection*) G__getstructoffset())->addFile((TFile*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot_collection*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         s_plane_collection* pobj;
         s_plane_collection xobj = ((S_plot_collection*) G__getstructoffset())->addPlot((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, *((S_Axis*) G__int(libp->para[2])), *((S_Axis*) G__int(libp->para[3])));
         pobj = new s_plane_collection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         s_plane_collection* pobj;
         s_plane_collection xobj = ((S_plot_collection*) G__getstructoffset())->addPlot(*((S_plot_def*) G__int(libp->para[0])), *((S_Axis*) G__int(libp->para[1]))
, *((S_Axis*) G__int(libp->para[2])));
         pobj = new s_plane_collection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         s_plane_collection* pobj;
         s_plane_collection xobj = ((S_plot_collection*) G__getstructoffset())->addPlot((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, *((S_Axis*) G__int(libp->para[2])), *((S_Axis*) G__int(libp->para[3]))
, *((S_DrawOption*) G__int(libp->para[4])));
         pobj = new s_plane_collection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         s_plane_collection* pobj;
         s_plane_collection xobj = ((S_plot_collection*) G__getstructoffset())->addPlot((const char*) G__int(libp->para[0]), *((S_plot*) G__int(libp->para[1])));
         pobj = new s_plane_collection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         s_plane_collection* pobj;
         s_plane_collection xobj = ((S_plot_collection*) G__getstructoffset())->addPlot((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, *((S_plane*) G__int(libp->para[2])), *((S_plane*) G__int(libp->para[3])));
         pobj = new s_plane_collection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         s_plane_collection* pobj;
         s_plane_collection xobj = ((S_plot_collection*) G__getstructoffset())->addPlot(*((S_plot_def*) G__int(libp->para[0])), *((S_plane*) G__int(libp->para[1]))
, *((S_plane*) G__int(libp->para[2])));
         pobj = new s_plane_collection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         s_plane_collection* pobj;
         s_plane_collection xobj = ((S_plot_collection*) G__getstructoffset())->addPlot(*((S_plot_def*) G__int(libp->para[0])), *((S_plane*) G__int(libp->para[1])));
         pobj = new s_plane_collection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot_collection*) G__getstructoffset())->Draw();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((S_plot_collection*) G__getstructoffset())->Draw((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((S_plot_collection*) G__getstructoffset())->Draw((const char*) G__int(libp->para[0]), *(S_DrawOption*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((S_plot_collection*) G__getstructoffset())->Draw(*(S_plane*) libp->para[0].ref, *(S_DrawOption*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((S_plot_collection*) G__getstructoffset())->loop((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((S_plot_collection*) G__getstructoffset())->loop((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((S_plot_collection*) G__getstructoffset())->loop();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) S_plot_collection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plot_collection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) S_plot_collection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      S_plot_collection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const S_plot_collection*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot_collection*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot_collection*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((S_plot_collection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plot_collection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_plot_collection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) S_plot_collection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SCT_plotsDict_548_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) S_plot_collection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SCT_plotsDict_548_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   S_plot_collection* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new S_plot_collection(*(S_plot_collection*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_collection));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef S_plot_collection G__TS_plot_collection;
static int G__SCT_plotsDict_548_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (S_plot_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((S_plot_collection*) (soff+(sizeof(S_plot_collection)*i)))->~G__TS_plot_collection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (S_plot_collection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((S_plot_collection*) (soff))->~G__TS_plot_collection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SCT_plotsDict_548_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   S_plot_collection* dest = (S_plot_collection*) G__getstructoffset();
   *dest = *(S_plot_collection*) libp->para[0].ref;
   const S_plot_collection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* S_plane */

/* S_Cut */

/* S_XCut */

/* S_YCut */

/* S_ZCut */

/* SCT_helpers */

/* sct_coll */

/* sct */

/* S_plot_def */

/* sct_plot */

/* S_treeCollection */

/* S_Axis */

/* s_plane_collection */

/* S_plot */

/* S_DrawOption */

/* S_plot_collection */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSCT_plotsDict {
 public:
  G__Sizep2memfuncSCT_plotsDict(): p(&G__Sizep2memfuncSCT_plotsDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSCT_plotsDict::*p)();
};

size_t G__get_sizep2memfuncSCT_plotsDict()
{
  G__Sizep2memfuncSCT_plotsDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSCT_plotsDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut))) {
     S_XCut *G__Lderived;
     G__Lderived=(S_XCut*)0x1000;
     {
       S_Cut *G__Lpbase=(S_Cut*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut),G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut))) {
     S_YCut *G__Lderived;
     G__Lderived=(S_YCut*)0x1000;
     {
       S_Cut *G__Lpbase=(S_Cut*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut),G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut))) {
     S_ZCut *G__Lderived;
     G__Lderived=(S_ZCut*)0x1000;
     {
       S_Cut *G__Lpbase=(S_Cut*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut),G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSCT_plotsDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SCT_plotsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SCT_plotsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SCT_plotsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SCT_plotsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__SCT_plotsDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* S_plane */
static void G__setup_memvarS_plane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane));
   { S_plane *p; p=(S_plane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S_Cut */
static void G__setup_memvarS_Cut(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut));
   { S_Cut *p; p=(S_Cut*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_min)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"m_min=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_max)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"m_max=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_cut_min)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"m_cut_min=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_cut_max)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"m_cut_max=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S_XCut */
static void G__setup_memvarS_XCut(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut));
   { S_XCut *p; p=(S_XCut*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S_YCut */
static void G__setup_memvarS_YCut(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut));
   { S_YCut *p; p=(S_YCut*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S_ZCut */
static void G__setup_memvarS_ZCut(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut));
   { S_ZCut *p; p=(S_ZCut*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SCT_helpers */
static void G__setup_memvarSCT_helpers(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_SCT_helpers));
   { SCT_helpers *p; p=(SCT_helpers*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* sct_coll */
static void G__setup_memvarsct_coll(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_coll));
   { sct_coll *p; p=(sct_coll*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* sct */
static void G__setup_memvarsct(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_sct));
   { sct *p; p=(sct*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* S_plot_def */
static void G__setup_memvarS_plot_def(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def));
   { S_plot_def *p; p=(S_plot_def*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* sct_plot */
static void G__setup_memvarsct_plot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_plot));
   { sct_plot *p; p=(sct_plot*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* S_treeCollection */
static void G__setup_memvarS_treeCollection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_treeCollection));
   { S_treeCollection *p; p=(S_treeCollection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S_Axis */
static void G__setup_memvarS_Axis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Axis));
   { S_Axis *p; p=(S_Axis*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_collectionName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TString),-1,-1,1,"m_collectionName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_planeID)-(long)(p)),100,0,0,-1,-1,-1,1,"m_planeID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_axis)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_axis_def),-1,-1,1,"m_axis=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* s_plane_collection */
static void G__setup_memvars_plane_collection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection));
   { s_plane_collection *p; p=(s_plane_collection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S_plot */
static void G__setup_memvarS_plot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot));
   { S_plot *p; p=(S_plot*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S_DrawOption */
static void G__setup_memvarS_DrawOption(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_DrawOption));
   { S_DrawOption *p; p=(S_DrawOption*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_options)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TString),-1,-1,1,"m_options=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_cuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TString),-1,-1,1,"m_cuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_axis)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TString),-1,-1,1,"m_axis=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* S_plot_collection */
static void G__setup_memvarS_plot_collection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_collection));
   { S_plot_collection *p; p=(S_plot_collection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSCT_plotsDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncS_plane(void) {
   /* S_plane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane));
   G__memfunc_setup("S_plane",706,G__SCT_plotsDict_527_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_plane",706,G__SCT_plotsDict_527_0_2, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 2, 1, 1, 0, 
"d - - 0 - ID U 'S_treeCollection' - 0 - hits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_plane",706,G__SCT_plotsDict_527_0_3, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name d - 'Double_t' 0 - ID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSetTreeCollectionSet",2256,G__SCT_plotsDict_527_0_4, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTreeCollection",1768,G__SCT_plotsDict_527_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'S_treeCollection' - 0 - hits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getName",705,G__SCT_plotsDict_527_0_6, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next",447,G__SCT_plotsDict_527_0_7, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__SCT_plotsDict_527_0_8, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_plane_hit), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX_def",806,G__SCT_plotsDict_527_0_9, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Axis), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY_def",807,G__SCT_plotsDict_527_0_10, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Axis), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__SCT_plotsDict_527_0_11, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_axis_ref), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__SCT_plotsDict_527_0_12, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_axis_ref), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_527_0_13, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S_plane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_527_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_527_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S_plane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_527_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S_plane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SCT_plotsDict_527_0_17, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SCT_plotsDict_527_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SCT_plotsDict_527_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_527_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_527_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_527_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_plane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_527_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_527_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_plane::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S_plane", 706, G__SCT_plotsDict_527_0_25, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 1, 1, 1, 0, "u 'S_plane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S_plane", 832, G__SCT_plotsDict_527_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_527_0_27, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 1, 1, 1, 1, 0, "u 'S_plane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS_Cut(void) {
   /* S_Cut */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut));
   G__memfunc_setup("S_Cut",478,G__SCT_plotsDict_528_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min_ d - 'Double_t' 0 - max_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_Cut",478,G__SCT_plotsDict_528_0_2, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - min_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_Cut",478,G__SCT_plotsDict_528_0_3, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOutOfRange",1206,G__SCT_plotsDict_528_0_4, 103, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_528_0_5, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S_Cut::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_528_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_Cut::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_528_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S_Cut::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_528_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S_Cut::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SCT_plotsDict_528_0_9, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SCT_plotsDict_528_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SCT_plotsDict_528_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_528_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_528_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_Cut::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_528_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_Cut::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_528_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_Cut::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_528_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_Cut::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S_Cut", 478, G__SCT_plotsDict_528_0_17, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut), -1, 0, 1, 1, 1, 0, "u 'S_Cut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S_Cut", 604, G__SCT_plotsDict_528_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_528_0_19, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Cut), -1, 1, 1, 1, 1, 0, "u 'S_Cut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS_XCut(void) {
   /* S_XCut */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut));
   G__memfunc_setup("S_XCut",566,G__SCT_plotsDict_529_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min_ d - 'Double_t' 0 - max_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_XCut",566,G__SCT_plotsDict_529_0_2, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - min_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_XCut",566,G__SCT_plotsDict_529_0_3, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_529_0_4, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S_XCut::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_529_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_XCut::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_529_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S_XCut::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_529_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S_XCut::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_529_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_529_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_XCut::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_529_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_XCut::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_529_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_XCut::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_529_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_XCut::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S_XCut", 566, G__SCT_plotsDict_529_0_16, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut), -1, 0, 1, 1, 1, 0, "u 'S_XCut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S_XCut", 692, G__SCT_plotsDict_529_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_529_0_18, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_XCut), -1, 1, 1, 1, 1, 0, "u 'S_XCut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS_YCut(void) {
   /* S_YCut */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut));
   G__memfunc_setup("S_YCut",567,G__SCT_plotsDict_530_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min_ d - 'Double_t' 0 - max_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_YCut",567,G__SCT_plotsDict_530_0_2, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - min_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_YCut",567,G__SCT_plotsDict_530_0_3, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_530_0_4, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S_YCut::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_530_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_YCut::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_530_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S_YCut::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_530_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S_YCut::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_530_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_530_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_YCut::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_530_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_YCut::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_530_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_YCut::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_530_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_YCut::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S_YCut", 567, G__SCT_plotsDict_530_0_16, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut), -1, 0, 1, 1, 1, 0, "u 'S_YCut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S_YCut", 693, G__SCT_plotsDict_530_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_530_0_18, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_YCut), -1, 1, 1, 1, 1, 0, "u 'S_YCut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS_ZCut(void) {
   /* S_ZCut */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut));
   G__memfunc_setup("S_ZCut",568,G__SCT_plotsDict_531_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min_ d - 'Double_t' 0 - max_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_ZCut",568,G__SCT_plotsDict_531_0_2, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - min_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_ZCut",568,G__SCT_plotsDict_531_0_3, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_531_0_4, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S_ZCut::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_531_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_ZCut::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_531_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S_ZCut::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_531_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S_ZCut::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_531_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_531_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_ZCut::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_531_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_ZCut::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_531_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_ZCut::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_531_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_ZCut::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S_ZCut", 568, G__SCT_plotsDict_531_0_16, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut), -1, 0, 1, 1, 1, 0, "u 'S_ZCut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S_ZCut", 694, G__SCT_plotsDict_531_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_531_0_18, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_ZCut), -1, 1, 1, 1, 1, 0, "u 'S_ZCut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSCT_helpers(void) {
   /* SCT_helpers */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_SCT_helpers));
   G__memfunc_setup("CutTH2",506,G__SCT_plotsDict_533_0_1, 121, -1, -1, 0, 4, 3, 1, 0, 
"U 'TH2' - 0 - h2 u 'S_XCut' - 0 - x "
"u 'S_YCut' - 0 - y u 'S_ZCut' - 0 - z", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, S_XCut, S_YCut, S_ZCut))(&SCT_helpers::CutTH2) ), 0);
   G__memfunc_setup("CutTH2",506,G__SCT_plotsDict_533_0_2, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH2' - 0 - h2 u 'S_ZCut' - 0 - z", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, S_ZCut))(&SCT_helpers::CutTH2) ), 0);
   // automatic default constructor
   G__memfunc_setup("SCT_helpers", 1084, G__SCT_plotsDict_533_0_3, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_SCT_helpers), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SCT_helpers", 1084, G__SCT_plotsDict_533_0_4, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_SCT_helpers), -1, 0, 1, 1, 1, 0, "u 'SCT_helpers' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SCT_helpers", 1210, G__SCT_plotsDict_533_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_533_0_6, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_SCT_helpers), -1, 1, 1, 1, 1, 0, "u 'SCT_helpers' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsct_coll(void) {
   /* sct_coll */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_coll));
   G__memfunc_setup("apix_hit_local",1472,G__SCT_plotsDict_534_0_1, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (S_plane (*)())(&sct_coll::apix_hit_local) ), 0);
   G__memfunc_setup("apix_hit",854,G__SCT_plotsDict_534_0_2, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (S_plane (*)())(&sct_coll::apix_hit) ), 0);
   G__memfunc_setup("apix_zs_data",1271,G__SCT_plotsDict_534_0_3, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (S_plane (*)())(&sct_coll::apix_zs_data) ), 0);
   G__memfunc_setup("apix_fitted",1169,G__SCT_plotsDict_534_0_4, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (S_plane (*)())(&sct_coll::apix_fitted) ), 0);
   G__memfunc_setup("apix_fitted_local",1787,G__SCT_plotsDict_534_0_5, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (S_plane (*)())(&sct_coll::apix_fitted_local) ), 0);
   G__memfunc_setup("DUT_hit_local",1275,G__SCT_plotsDict_534_0_6, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (S_plane (*)())(&sct_coll::DUT_hit_local) ), 0);
   G__memfunc_setup("DUT_hit",657,G__SCT_plotsDict_534_0_7, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (S_plane (*)())(&sct_coll::DUT_hit) ), 0);
   G__memfunc_setup("DUT_zs_data",1074,G__SCT_plotsDict_534_0_8, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (S_plane (*)())(&sct_coll::DUT_zs_data) ), 0);
   G__memfunc_setup("DUT_fitted",972,G__SCT_plotsDict_534_0_9, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (S_plane (*)())(&sct_coll::DUT_fitted) ), 0);
   G__memfunc_setup("DUT_fitted_local",1590,G__SCT_plotsDict_534_0_10, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (S_plane (*)())(&sct_coll::DUT_fitted_local) ), 0);
   G__memfunc_setup("tel_hit_local",1363,G__SCT_plotsDict_534_0_11, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 1, 3, 1, 0, "d - - 0 - ID", (char*)NULL, (void*) G__func2void( (S_plane (*)(double))(&sct_coll::tel_hit_local) ), 0);
   G__memfunc_setup("tel_hit",745,G__SCT_plotsDict_534_0_12, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 1, 3, 1, 0, "d - - 0 - ID", (char*)NULL, (void*) G__func2void( (S_plane (*)(double))(&sct_coll::tel_hit) ), 0);
   G__memfunc_setup("tel_zs_data",1162,G__SCT_plotsDict_534_0_13, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 1, 3, 1, 0, "d - - 0 - ID", (char*)NULL, (void*) G__func2void( (S_plane (*)(double))(&sct_coll::tel_zs_data) ), 0);
   G__memfunc_setup("tel_fitted",1060,G__SCT_plotsDict_534_0_14, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 1, 3, 1, 0, "d - - 0 - ID", (char*)NULL, (void*) G__func2void( (S_plane (*)(double))(&sct_coll::tel_fitted) ), 0);
   G__memfunc_setup("tel_fitted_local",1678,G__SCT_plotsDict_534_0_15, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 1, 3, 1, 0, "d - - 0 - ID", (char*)NULL, (void*) G__func2void( (S_plane (*)(double))(&sct_coll::tel_fitted_local) ), 0);
   // automatic default constructor
   G__memfunc_setup("sct_coll", 851, G__SCT_plotsDict_534_0_16, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_coll), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("sct_coll", 851, G__SCT_plotsDict_534_0_17, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_coll), -1, 0, 1, 1, 1, 0, "u 'sct_coll' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~sct_coll", 977, G__SCT_plotsDict_534_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_534_0_19, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_coll), -1, 1, 1, 1, 1, 0, "u 'sct_coll' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsct(void) {
   /* sct */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_sct));
   G__memfunc_setup("col_hit",738,G__SCT_plotsDict_535_0_1, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::col_hit) ), 0);
   G__memfunc_setup("col_zsdata_strip",1717,G__SCT_plotsDict_535_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::col_zsdata_strip) ), 0);
   G__memfunc_setup("col_zsdata_m26",1368,G__SCT_plotsDict_535_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::col_zsdata_m26) ), 0);
   G__memfunc_setup("col_zsdata_apix",1589,G__SCT_plotsDict_535_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::col_zsdata_apix) ), 0);
   G__memfunc_setup("col_fitpoints",1405,G__SCT_plotsDict_535_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::col_fitpoints) ), 0);
   G__memfunc_setup("col_fitpoints_local",2023,G__SCT_plotsDict_535_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::col_fitpoints_local) ), 0);
   G__memfunc_setup("col_local_hit",1356,G__SCT_plotsDict_535_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::col_local_hit) ), 0);
   G__memfunc_setup("plot_hitmap",1185,G__SCT_plotsDict_535_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_hitmap) ), 0);
   G__memfunc_setup("plot_correlation",1728,G__SCT_plotsDict_535_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_correlation) ), 0);
   G__memfunc_setup("plot_residual",1399,G__SCT_plotsDict_535_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_residual) ), 0);
   G__memfunc_setup("plot_clusterSize",1723,G__SCT_plotsDict_535_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_clusterSize) ), 0);
   G__memfunc_setup("plot_projectOnPixel",2004,G__SCT_plotsDict_535_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_projectOnPixel) ), 0);
   G__memfunc_setup("plot_find_correspondingX",2547,G__SCT_plotsDict_535_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_find_correspondingX) ), 0);
   G__memfunc_setup("plot_find_correspondingXY",2636,G__SCT_plotsDict_535_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_find_correspondingXY) ), 0);
   G__memfunc_setup("plot_Event_size",1594,G__SCT_plotsDict_535_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_Event_size) ), 0);
   G__memfunc_setup("plot_find_nearest",1808,G__SCT_plotsDict_535_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_find_nearest) ), 0);
   G__memfunc_setup("plot_plane_distance",2008,G__SCT_plotsDict_535_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_plane_distance) ), 0);
   G__memfunc_setup("plot_find_nearest_strip",2465,G__SCT_plotsDict_535_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_find_nearest_strip) ), 0);
   G__memfunc_setup("plot_A_if_B",1070,G__SCT_plotsDict_535_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_A_if_B) ), 0);
   G__memfunc_setup("plot_rotated",1297,G__SCT_plotsDict_535_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_rotated) ), 0);
   G__memfunc_setup("plot_coordinate_transform",2689,G__SCT_plotsDict_535_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&sct::plot_coordinate_transform) ), 0);
   // automatic default constructor
   G__memfunc_setup("sct", 330, G__SCT_plotsDict_535_0_22, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_sct), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("sct", 330, G__SCT_plotsDict_535_0_23, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_sct), -1, 0, 1, 1, 1, 0, "u 'sct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~sct", 456, G__SCT_plotsDict_535_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_535_0_25, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_sct), -1, 1, 1, 1, 1, 0, "u 'sct' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS_plot_def(void) {
   /* S_plot_def */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def));
   G__memfunc_setup("S_plot_def",1023,G__SCT_plotsDict_536_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 3, 1, 1, 0, 
"C - - 10 - type C - - 10 - name "
"g - - 0 'true' save2disk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParameter",1261,G__SCT_plotsDict_536_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - tag C - - 10 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParameter",1249,G__SCT_plotsDict_536_0_3, 67, -1, -1, 0, 2, 1, 1, 1, 
"C - - 10 - tag C - - 10 - default_value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_536_0_4, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S_plot_def::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_536_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plot_def::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_536_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S_plot_def::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_536_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S_plot_def::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SCT_plotsDict_536_0_8, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SCT_plotsDict_536_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SCT_plotsDict_536_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_536_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_536_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plot_def::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_536_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_plot_def::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_536_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plot_def::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_536_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_plot_def::DeclFileLine) ), 0);
   G__memfunc_setup("S_plot_def",1023,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("S_plot_def", 1023, G__SCT_plotsDict_536_0_17, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 1, 1, 1, 0, "u 'S_plot_def' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S_plot_def", 1149, G__SCT_plotsDict_536_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_536_0_19, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 1, 1, 1, 1, 0, "u 'S_plot_def' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncsct_plot(void) {
   /* sct_plot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_plot));
   G__memfunc_setup("s_hitmap",853,G__SCT_plotsDict_537_0_1, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 2, 3, 1, 0, 
"C - - 10 - name g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, bool))(&sct_plot::s_hitmap) ), 0);
   G__memfunc_setup("s_correlation",1396,G__SCT_plotsDict_537_0_2, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 2, 3, 1, 0, 
"C - - 10 - name g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, bool))(&sct_plot::s_correlation) ), 0);
   G__memfunc_setup("s_residual",1067,G__SCT_plotsDict_537_0_3, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 2, 3, 1, 0, 
"C - - 10 - name g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, bool))(&sct_plot::s_residual) ), 0);
   G__memfunc_setup("s_clustering",1298,G__SCT_plotsDict_537_0_4, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 3, 3, 1, 0, 
"C - - 10 - name d - 'Double_t' 0 '2' Pixel_distance "
"g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, Double_t, bool))(&sct_plot::s_clustering) ), 0);
   G__memfunc_setup("s_projectOnPixel",1672,G__SCT_plotsDict_537_0_5, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 2, 3, 1, 0, 
"C - - 10 - name g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, bool))(&sct_plot::s_projectOnPixel) ), 0);
   G__memfunc_setup("s_find_correspondingX",2215,G__SCT_plotsDict_537_0_6, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 2, 3, 1, 0, 
"C - - 10 - name g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, bool))(&sct_plot::s_find_correspondingX) ), 0);
   G__memfunc_setup("s_find_correspondingXY",2304,G__SCT_plotsDict_537_0_7, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 2, 3, 1, 0, 
"C - - 10 - name g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, bool))(&sct_plot::s_find_correspondingXY) ), 0);
   G__memfunc_setup("s_Event_size",1262,G__SCT_plotsDict_537_0_8, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 2, 3, 1, 0, 
"C - - 10 - name g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, bool))(&sct_plot::s_Event_size) ), 0);
   G__memfunc_setup("s_find_nearest",1476,G__SCT_plotsDict_537_0_9, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 4, 3, 1, 0, 
"C - - 10 - name d - 'Double_t' 0 - x_cutoff "
"d - 'Double_t' 0 - y_cutoff g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, Double_t, Double_t, bool))(&sct_plot::s_find_nearest) ), 0);
   G__memfunc_setup("s_find_nearest_strip",2133,G__SCT_plotsDict_537_0_10, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 4, 3, 1, 0, 
"C - - 10 - name i 'axis_def' - 0 - search_axis "
"d - 'Double_t' 0 '100000' cutOfff g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, axis_def, Double_t, bool))(&sct_plot::s_find_nearest_strip) ), 0);
   G__memfunc_setup("s_plane_distance",1676,G__SCT_plotsDict_537_0_11, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 2, 3, 1, 0, 
"C - - 10 - name g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, bool))(&sct_plot::s_plane_distance) ), 0);
   G__memfunc_setup("s_A_if_B",738,G__SCT_plotsDict_537_0_12, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 2, 3, 1, 0, 
"C - - 10 - name g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, bool))(&sct_plot::s_A_if_B) ), 0);
   G__memfunc_setup("s_rotated",965,G__SCT_plotsDict_537_0_13, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 3, 3, 1, 0, 
"C - - 10 - name d - 'Double_t' 0 - angle "
"g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, Double_t, bool))(&sct_plot::s_rotated) ), 0);
   G__memfunc_setup("s_coordinate_transform",2357,G__SCT_plotsDict_537_0_14, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_def), -1, 0, 6, 3, 1, 0, 
"C - - 10 - name d - 'Double_t' 0 - x_slope "
"d - 'Double_t' 0 - x_offset d - 'Double_t' 0 - y_slope "
"d - 'Double_t' 0 - y_offset g - - 0 'true' save2disk", (char*)NULL, (void*) G__func2void( (S_plot_def (*)(const char*, Double_t, Double_t, Double_t, Double_t, bool))(&sct_plot::s_coordinate_transform) ), 0);
   // automatic default constructor
   G__memfunc_setup("sct_plot", 872, G__SCT_plotsDict_537_0_15, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_plot), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("sct_plot", 872, G__SCT_plotsDict_537_0_16, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_plot), -1, 0, 1, 1, 1, 0, "u 'sct_plot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~sct_plot", 998, G__SCT_plotsDict_537_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_537_0_18, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_sct_plot), -1, 1, 1, 1, 1, 0, "u 'sct_plot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS_treeCollection(void) {
   /* S_treeCollection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_treeCollection));
   G__memfunc_setup("S_treeCollection",1646,G__SCT_plotsDict_542_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_treeCollection), -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,G__SCT_plotsDict_542_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntries",1018,G__SCT_plotsDict_542_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_542_0_4, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S_treeCollection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_542_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_treeCollection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_542_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S_treeCollection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_542_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S_treeCollection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SCT_plotsDict_542_0_8, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SCT_plotsDict_542_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SCT_plotsDict_542_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_542_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_542_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_treeCollection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_542_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_treeCollection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_542_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_treeCollection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_542_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_treeCollection::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S_treeCollection", 1646, G__SCT_plotsDict_542_0_16, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_treeCollection), -1, 0, 1, 1, 1, 0, "u 'S_treeCollection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S_treeCollection", 1772, G__SCT_plotsDict_542_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_542_0_18, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_treeCollection), -1, 1, 1, 1, 1, 0, "u 'S_treeCollection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS_Axis(void) {
   /* S_Axis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Axis));
   G__memfunc_setup("S_Axis",583,G__SCT_plotsDict_543_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Axis), -1, 0, 3, 1, 1, 0, 
"C - - 10 - collctionName d - - 0 - planeID "
"i 'axis_def' - 0 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_543_0_2, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S_Axis::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_543_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_Axis::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_543_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S_Axis::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_543_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S_Axis::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SCT_plotsDict_543_0_6, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SCT_plotsDict_543_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SCT_plotsDict_543_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_543_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_543_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_Axis::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_543_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_Axis::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_543_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_Axis::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_543_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_Axis::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S_Axis", 583, G__SCT_plotsDict_543_0_14, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Axis), -1, 0, 1, 1, 1, 0, "u 'S_Axis' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S_Axis", 709, G__SCT_plotsDict_543_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_543_0_16, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_Axis), -1, 1, 1, 1, 1, 0, "u 'S_Axis' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncs_plane_collection(void) {
   /* s_plane_collection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection));
   G__memfunc_setup("s_plane_collection",1901,G__SCT_plotsDict_545_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__SCT_plotsDict_545_0_2, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__SCT_plotsDict_545_0_3, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__SCT_plotsDict_545_0_4, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getName",705,G__SCT_plotsDict_545_0_5, 67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("showNames",949,G__SCT_plotsDict_545_0_6, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SCT_plotsDict_545_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_545_0_8, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&s_plane_collection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_545_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&s_plane_collection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_545_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&s_plane_collection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_545_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&s_plane_collection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SCT_plotsDict_545_0_12, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SCT_plotsDict_545_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SCT_plotsDict_545_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_545_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_545_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&s_plane_collection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_545_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&s_plane_collection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_545_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&s_plane_collection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_545_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&s_plane_collection::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("s_plane_collection", 1901, G__SCT_plotsDict_545_0_20, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection), -1, 0, 1, 1, 1, 0, "u 's_plane_collection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~s_plane_collection", 2027, G__SCT_plotsDict_545_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_545_0_22, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection), -1, 1, 1, 1, 1, 0, "u 's_plane_collection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS_plot(void) {
   /* S_plot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot));
   G__memfunc_setup("S_plot",625,G__SCT_plotsDict_546_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_plot",625,G__SCT_plotsDict_546_0_2, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot), -1, 0, 1, 1, 1, 0, "u 'S_plot' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_plot",625,G__SCT_plotsDict_546_0_3, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot), -1, 0, 4, 1, 1, 0, 
"C - - 10 - type C - - 10 - name "
"U 'axis_ref' - 0 - x U 'axis_ref' - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_plot",625,G__SCT_plotsDict_546_0_4, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot), -1, 0, 4, 1, 1, 0, 
"C - - 10 - type C - - 10 - name "
"U 'S_plane' - 0 - x U 'S_plane' - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_plot",625,G__SCT_plotsDict_546_0_5, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot), -1, 0, 3, 1, 1, 0, 
"u 'S_plot_def' - 11 - plotdef U 'S_plane' - 0 - x "
"U 'S_plane' - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("S_plot",625,G__SCT_plotsDict_546_0_6, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot), -1, 0, 3, 1, 1, 0, 
"u 'S_plot_def' - 11 - plotdef U 'axis_ref' - 0 - x "
"U 'axis_ref' - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__SCT_plotsDict_546_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__SCT_plotsDict_546_0_8, 110, -1, G__defined_typename("Long64_t"), 0, 3, 1, 1, 0, 
"C - - 10 - options C - - 10 '\"\"' cuts "
"C - - 10 '\"y:x\"' axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutputcollection",2045,G__SCT_plotsDict_546_0_9, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_546_0_10, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S_plot::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_546_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plot::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_546_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S_plot::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_546_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S_plot::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SCT_plotsDict_546_0_14, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SCT_plotsDict_546_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SCT_plotsDict_546_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_546_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_546_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plot::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_546_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_plot::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_546_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plot::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_546_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_plot::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~S_plot", 751, G__SCT_plotsDict_546_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_546_0_23, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot), -1, 1, 1, 1, 1, 0, "u 'S_plot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS_DrawOption(void) {
   /* S_DrawOption */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_DrawOption));
   G__memfunc_setup("S_DrawOption",1209,G__SCT_plotsDict_547_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_DrawOption), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"colz\"' options C - - 10 '\"\"' cuts "
"C - - 10 '\"y:x\"' axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_547_0_2, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S_DrawOption::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_547_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_DrawOption::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_547_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S_DrawOption::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_547_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S_DrawOption::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SCT_plotsDict_547_0_6, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SCT_plotsDict_547_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SCT_plotsDict_547_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_547_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_547_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_DrawOption::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_547_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_DrawOption::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_547_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_DrawOption::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_547_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_DrawOption::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S_DrawOption", 1209, G__SCT_plotsDict_547_0_14, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_DrawOption), -1, 0, 1, 1, 1, 0, "u 'S_DrawOption' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S_DrawOption", 1335, G__SCT_plotsDict_547_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_547_0_16, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_DrawOption), -1, 1, 1, 1, 1, 0, "u 'S_DrawOption' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncS_plot_collection(void) {
   /* S_plot_collection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_collection));
   G__memfunc_setup("S_plot_collection",1788,G__SCT_plotsDict_548_0_1, 105, G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_collection), -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFile",681,G__SCT_plotsDict_548_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__SCT_plotsDict_548_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPlot",712,G__SCT_plotsDict_548_0_4, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection), -1, 0, 4, 1, 1, 0, 
"C - - 10 - PlotType C - - 10 - name "
"u 'S_Axis' - 0 - x_axis u 'S_Axis' - 0 - y_axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPlot",712,G__SCT_plotsDict_548_0_5, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection), -1, 0, 3, 1, 1, 0, 
"u 'S_plot_def' - 0 - plot_def u 'S_Axis' - 0 - x_axis "
"u 'S_Axis' - 0 - y_axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPlot",712,G__SCT_plotsDict_548_0_6, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection), -1, 0, 5, 1, 1, 0, 
"C - - 10 - PlotType C - - 10 - name "
"u 'S_Axis' - 0 - x_axis u 'S_Axis' - 0 - y_axis "
"u 'S_DrawOption' - 0 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPlot",712,G__SCT_plotsDict_548_0_7, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name u 'S_plot' - 0 - pl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPlot",712,G__SCT_plotsDict_548_0_8, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection), -1, 0, 4, 1, 1, 0, 
"C - - 10 - PlotType C - - 10 - name "
"u 'S_plane' - 0 - p1 u 'S_plane' - 0 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPlot",712,G__SCT_plotsDict_548_0_9, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection), -1, 0, 3, 1, 1, 0, 
"u 'S_plot_def' - 0 - plot_def u 'S_plane' - 0 - p1 "
"u 'S_plane' - 0 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPlot",712,G__SCT_plotsDict_548_0_10, 117, G__get_linked_tagnum(&G__SCT_plotsDictLN_s_plane_collection), -1, 0, 2, 1, 1, 0, 
"u 'S_plot_def' - 0 - plot_def u 'S_plane' - 0 - p1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__SCT_plotsDict_548_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__SCT_plotsDict_548_0_12, 110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__SCT_plotsDict_548_0_13, 110, -1, G__defined_typename("Long64_t"), 0, 2, 1, 1, 0, 
"C - - 10 - name u 'S_DrawOption' - 11 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__SCT_plotsDict_548_0_14, 110, -1, G__defined_typename("Long64_t"), 0, 2, 1, 1, 0, 
"u 'S_plane' - 11 - name u 'S_DrawOption' - 11 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loop",442,G__SCT_plotsDict_548_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '-1' last i - 'Int_t' 0 '0' start", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SCT_plotsDict_548_0_16, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&S_plot_collection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SCT_plotsDict_548_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plot_collection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SCT_plotsDict_548_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&S_plot_collection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SCT_plotsDict_548_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&S_plot_collection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SCT_plotsDict_548_0_20, 85, G__get_linked_tagnum(&G__SCT_plotsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SCT_plotsDict_548_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SCT_plotsDict_548_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SCT_plotsDict_548_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SCT_plotsDict_548_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plot_collection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SCT_plotsDict_548_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_plot_collection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SCT_plotsDict_548_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&S_plot_collection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SCT_plotsDict_548_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&S_plot_collection::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("S_plot_collection", 1788, G__SCT_plotsDict_548_0_28, (int) ('i'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_collection), -1, 0, 1, 1, 1, 0, "u 'S_plot_collection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~S_plot_collection", 1914, G__SCT_plotsDict_548_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SCT_plotsDict_548_0_30, (int) ('u'), G__get_linked_tagnum(&G__SCT_plotsDictLN_S_plot_collection), -1, 1, 1, 1, 1, 0, "u 'S_plot_collection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSCT_plotsDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SCT_plotsDictLN_axis_def),-1,-1,1,"x_axis_def=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SCT_plotsDictLN_axis_def),-1,-1,1,"y_axis_def=1",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSCT_plotsDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSCT_plotsDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SCT_plotsDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_axis_def = { "axis_def" , 101 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_S_plane = { "S_plane" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_S_Cut = { "S_Cut" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_S_XCut = { "S_XCut" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_S_YCut = { "S_YCut" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_S_ZCut = { "S_ZCut" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_SCT_helpers = { "SCT_helpers" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_sct_coll = { "sct_coll" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_sct = { "sct" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_S_plot_def = { "S_plot_def" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_sct_plot = { "sct_plot" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_axis_ref = { "axis_ref" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_S_treeCollection = { "S_treeCollection" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_S_Axis = { "S_Axis" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_plane_hit = { "plane_hit" , 115 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_s_plane_collection = { "s_plane_collection" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_S_plot = { "S_plot" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_S_DrawOption = { "S_DrawOption" , 99 , -1 };
G__linked_taginfo G__SCT_plotsDictLN_S_plot_collection = { "S_plot_collection" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSCT_plotsDict() {
  G__SCT_plotsDictLN_TClass.tagnum = -1 ;
  G__SCT_plotsDictLN_TBuffer.tagnum = -1 ;
  G__SCT_plotsDictLN_TMemberInspector.tagnum = -1 ;
  G__SCT_plotsDictLN_TString.tagnum = -1 ;
  G__SCT_plotsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SCT_plotsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SCT_plotsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SCT_plotsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SCT_plotsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SCT_plotsDictLN_TTree.tagnum = -1 ;
  G__SCT_plotsDictLN_TFile.tagnum = -1 ;
  G__SCT_plotsDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__SCT_plotsDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__SCT_plotsDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__SCT_plotsDictLN_axis_def.tagnum = -1 ;
  G__SCT_plotsDictLN_S_plane.tagnum = -1 ;
  G__SCT_plotsDictLN_S_Cut.tagnum = -1 ;
  G__SCT_plotsDictLN_S_XCut.tagnum = -1 ;
  G__SCT_plotsDictLN_S_YCut.tagnum = -1 ;
  G__SCT_plotsDictLN_S_ZCut.tagnum = -1 ;
  G__SCT_plotsDictLN_TH2.tagnum = -1 ;
  G__SCT_plotsDictLN_SCT_helpers.tagnum = -1 ;
  G__SCT_plotsDictLN_sct_coll.tagnum = -1 ;
  G__SCT_plotsDictLN_sct.tagnum = -1 ;
  G__SCT_plotsDictLN_S_plot_def.tagnum = -1 ;
  G__SCT_plotsDictLN_sct_plot.tagnum = -1 ;
  G__SCT_plotsDictLN_axis_ref.tagnum = -1 ;
  G__SCT_plotsDictLN_S_treeCollection.tagnum = -1 ;
  G__SCT_plotsDictLN_S_Axis.tagnum = -1 ;
  G__SCT_plotsDictLN_plane_hit.tagnum = -1 ;
  G__SCT_plotsDictLN_s_plane_collection.tagnum = -1 ;
  G__SCT_plotsDictLN_S_plot.tagnum = -1 ;
  G__SCT_plotsDictLN_S_DrawOption.tagnum = -1 ;
  G__SCT_plotsDictLN_S_plot_collection.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSCT_plotsDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_TString);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_TVectorTlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_axis_def),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_S_plane),sizeof(S_plane),-1,33024,(char*)NULL,G__setup_memvarS_plane,G__setup_memfuncS_plane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_S_Cut),sizeof(S_Cut),-1,33024,(char*)NULL,G__setup_memvarS_Cut,G__setup_memfuncS_Cut);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_S_XCut),sizeof(S_XCut),-1,33024,(char*)NULL,G__setup_memvarS_XCut,G__setup_memfuncS_XCut);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_S_YCut),sizeof(S_YCut),-1,33024,(char*)NULL,G__setup_memvarS_YCut,G__setup_memfuncS_YCut);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_S_ZCut),sizeof(S_ZCut),-1,33024,(char*)NULL,G__setup_memvarS_ZCut,G__setup_memfuncS_ZCut);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_TH2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_SCT_helpers),sizeof(SCT_helpers),-1,0,(char*)NULL,G__setup_memvarSCT_helpers,G__setup_memfuncSCT_helpers);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_sct_coll),sizeof(sct_coll),-1,0,(char*)NULL,G__setup_memvarsct_coll,G__setup_memfuncsct_coll);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_sct),sizeof(sct),-1,0,(char*)NULL,G__setup_memvarsct,G__setup_memfuncsct);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_S_plot_def),sizeof(S_plot_def),-1,33024,(char*)NULL,G__setup_memvarS_plot_def,G__setup_memfuncS_plot_def);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_sct_plot),sizeof(sct_plot),-1,0,(char*)NULL,G__setup_memvarsct_plot,G__setup_memfuncsct_plot);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_axis_ref);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_S_treeCollection),sizeof(S_treeCollection),-1,32768,(char*)NULL,G__setup_memvarS_treeCollection,G__setup_memfuncS_treeCollection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_S_Axis),sizeof(S_Axis),-1,32768,(char*)NULL,G__setup_memvarS_Axis,G__setup_memfuncS_Axis);
   G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_plane_hit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_s_plane_collection),sizeof(s_plane_collection),-1,256,(char*)NULL,G__setup_memvars_plane_collection,G__setup_memfuncs_plane_collection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_S_plot),sizeof(S_plot),-1,33536,(char*)NULL,G__setup_memvarS_plot,G__setup_memfuncS_plot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_S_DrawOption),sizeof(S_DrawOption),-1,256,(char*)NULL,G__setup_memvarS_DrawOption,G__setup_memfuncS_DrawOption);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SCT_plotsDictLN_S_plot_collection),sizeof(S_plot_collection),-1,32768,(char*)NULL,G__setup_memvarS_plot_collection,G__setup_memfuncS_plot_collection);
}
extern "C" void G__cpp_setupSCT_plotsDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupSCT_plotsDict()");
  G__set_cpp_environmentSCT_plotsDict();
  G__cpp_setup_tagtableSCT_plotsDict();

  G__cpp_setup_inheritanceSCT_plotsDict();

  G__cpp_setup_typetableSCT_plotsDict();

  G__cpp_setup_memvarSCT_plotsDict();

  G__cpp_setup_memfuncSCT_plotsDict();
  G__cpp_setup_globalSCT_plotsDict();
  G__cpp_setup_funcSCT_plotsDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSCT_plotsDict();
  return;
}
class G__cpp_setup_initSCT_plotsDict {
  public:
    G__cpp_setup_initSCT_plotsDict() { G__add_setup_func("SCT_plotsDict",(G__incsetup)(&G__cpp_setupSCT_plotsDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSCT_plotsDict() { G__remove_setup_func("SCT_plotsDict"); }
};
G__cpp_setup_initSCT_plotsDict G__cpp_setup_initializerSCT_plotsDict;


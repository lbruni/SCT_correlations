#include "sct_plots.h"

#include "treeCollection.h"
#include <iostream>
#include "cluster.h"
#include "TCanvas.h"
#include "TVector.h"
#include "TMath.h"
#include "sct_plots_internal.h"
#include "TH2.h"
#include "TH2D.h"
#include "TAxis.h"









<<<<<<< HEAD
    if (m__id==0)
    {
    
    if (hit_abs(p2) < 0.1){
      if (TMath::Abs(p1.y)<0.2)
      {
        m_status = 0;
      }
      else
      {
        m_status = 1;
      }
    }
    else{
      if (TMath::Abs(p1.y) < 0.2)
      {
        m_status = 10;
      }
      else
      {
        m_status = 11;
        
      }
    }
    }
    pushHit(p1.x, p1.y, m__id*100 + m_status);
      ++m__id;
    //pushHit(hit_abs(p1), hit_abs(p2));
  }
  static double hit_abs(const plane_hit& h){
=======
>>>>>>> 2927d3b6b2a82571ae5f3391d15030f3252c19d2




<<<<<<< HEAD
    if (abs(p1.x - p2.x) < 0.1)
    {
      pushHit(p1.x, p1.y);
    }

  }
  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("plot_find_correspondingX"), S_plane(m_outTree->m_name.c_str(), 0)));
    return ret;
  }
};
class plot_Event_size :public plotPlaneVsPlane{
public:
  plot_Event_size(const  S_plot_def& plot_def , S_plane* x, S_plane* y) : plotPlaneVsPlane(plot_def, x, y){}
  virtual void processEventEnd() {

    pushHit(m_size_x, m_size_y);

  }
  virtual void processHit(const plane_hit&  p1, const plane_hit&  p2) {};

  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("Event_size"), S_plane(m_outTree->m_name.c_str(), 0)));
    return ret;
  }
};
class plot_find_correspondingXY :public plotPlaneVsPlane{
public:
  plot_find_correspondingXY(const  S_plot_def& plot_def , S_plane* x, S_plane* y) : plotPlaneVsPlane(plot_def, x, y){}
  virtual void processHit(const plane_hit&  p1, const plane_hit&  p2) {

    if (TMath::Abs(p1.x - p2.x) < 0.1 && TMath::Abs(p1.y - p2.y) < 0.1)
    {
      pushHit(p1.x, p1.y);
    }

  }
  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("correspondingXY"), S_plane(m_outTree->m_name.c_str(), 0)));
    return ret;
  }
};

class plot_a_if_b_has_a_hit :public plotPlaneVsPlane{
public:
  plot_a_if_b_has_a_hit(const  S_plot_def& plot_def , S_plane* x, S_plane* y) : plotPlaneVsPlane(plot_def, x, y){}
  virtual void processEventStart() {
    int i = 0;
  }
  virtual void processHit(const plane_hit&  p1, const plane_hit&  p2) override {

    pushHit(p1.x, p1.y, 0);
    pushHit(p2.x, p2.y, 1);
  }
  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("A_if_B_has_a_hit_get_A"), S_plane(m_outTree->m_name.c_str(), 0)));
    ret.m_planes.push_back(std::make_pair(std::string("A_if_B_has_a_hit_get_B"), S_plane(m_outTree->m_name.c_str(), 1)));
    return ret;
  }
};
class find_nearest_strip :public plotPlaneVsPlane{
public:
  find_nearest_strip(const  S_plot_def& plot_def , S_plane* x, S_plane* y) : plotPlaneVsPlane(plot_def, x, y){
    try {
      auto ax = atoi(m_plot_def.getParameter(axis_name(), "0"));
      if (ax==x_axis_def )
      {
        m_axis = x_axis_def;
      }
      else if (ax == y_axis_def){
        m_axis = y_axis_def;

      }
      else
      {
        std::cout << "[find_nearest_strip] unable to convert to axis def" << std::endl;
      }


      m_cutOff = atof(m_plot_def.getParameter(cutOff_name(), "1000000000"));
    }
    catch (...){
      std::cout << "[find_nearest_strip] unable to convert" << std::endl;
    }



  }
  static  const char* axis_name(){ return "axis____"; }
  static  const char* cutOff_name(){ return "cutOff____"; }
  virtual void processEventStart() {

    dist = plane_hit(0, 0);
    h1 = plane_hit(0, 0);
    h2 = plane_hit(0, 0);
    r = m_cutOff;
  }
  virtual void processHit(const plane_hit&  p1, const plane_hit&  p2) {

    plane_hit e(p1.x - p2.x, p1.y - p2.y);
    double r1 = 0;
    if (m_axis == x_axis_def)
    {
      r1 = TMath::Abs(e.x);
    }
    else if (m_axis == y_axis_def) {
      r1 = TMath::Abs(e.y);
    }
    else{
      std::cout << "unknown axis" << std::endl;
    }

    if (r1 > 0 && r1 < r)
    {
      r = r1;
      dist = e;
      h1 = p1;
      h2 = p2;
    }

  }

  virtual void processEventEnd() {
    



    if (r < m_cutOff)
    {
      pushHit(dist.x, dist.y,0);
      pushHit(h1.x, h1.y,1);
      pushHit(h2.x, h2.y,2);
    }
  }
  double m_cutOff;
  plane_hit dist = plane_hit(0, 0), h1=plane_hit(0, 0), h2=plane_hit(0, 0);
  double r = 10000000;
  axis_def m_axis;
  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("nearest_strip_distance"), S_plane(m_outTree->m_name.c_str(), 0)));
    ret.m_planes.push_back(std::make_pair(std::string("nearest_strip_plane1"), S_plane(m_outTree->m_name.c_str(), 1)));
    ret.m_planes.push_back(std::make_pair(std::string("nearest_strip_plane2"), S_plane(m_outTree->m_name.c_str(), 2)));
    return ret;
  }

};
class find_nearest :public plotPlaneVsPlane{
public:
  
  static const char* x_cutOff_name(){ return "x_cutOff___"; }
  static const char* y_cutOff_name(){ return "y_cutOff___"; }
  find_nearest(const  S_plot_def& plot_def , S_plane* x, S_plane* y) : plotPlaneVsPlane(plot_def, x, y){
    try{

      m_x_cutOff = atof(m_plot_def.getParameter(x_cutOff_name(), "100000"));
      m_y_cutOff = atof(m_plot_def.getParameter(y_cutOff_name(), "100000"));
    }
    catch (...){
      std::cout << "[find_nearest]  unable to convert parameter" << std::endl;

    }
  }
  virtual void processEventStart() {
    m_hit1.clear();
    m_hit2.clear();
    m_dist.clear();
  }
  virtual void processHit(const plane_hit&  p1, const plane_hit&  p2) {


    m_dist.emplace_back((p1.x - p2.x), (p1.y - p2.y));
    m_hit1.emplace_back(p1.x, p1.y);
    m_hit2.emplace_back(p2.x, p2.y);
  }

  virtual void processEventEnd() {

    double r = m_c_noHit;
    double x_diff = m_x_cutOff;


    plane_hit dist(0, 0),h1(0,0),h2(0,0);

    for (size_t i = 0; i < m_dist.size();++i)
    {
      auto e = m_dist.at(i);
      auto r1 = TMath::Sqrt((e.x)*(e.x) + (e.y)*(e.y));

      if (r1 > 0 
        && 
        r1 < r 
        && 
	  TMath::Abs(e.x) < m_x_cutOff
        && 
	  TMath::Abs(e.y)<m_y_cutOff )
      {
        r = r1;
        dist = e;
        h1 = m_hit1.at(i);
        h2 = m_hit2.at(i);
      }

    }

    if (r < m_c_noHit)
    {
      pushHit(dist.x, dist.y,0);
      pushHit(h1.x, h1.y,1);
      pushHit(h2.x, h1.y,2);
    }
  }
  const double m_c_noHit = 100000000000;
  double m_x_cutOff, m_y_cutOff;
  std::vector<plane_hit> m_dist, m_hit1, m_hit2;

  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("nearest_distance"), S_plane(m_outTree->m_name.c_str(), 0)));
    ret.m_planes.push_back(std::make_pair(std::string("nearest_plane1"), S_plane(m_outTree->m_name.c_str(), 1)));
    ret.m_planes.push_back(std::make_pair(std::string("nearest_plane2"), S_plane(m_outTree->m_name.c_str(), 2)));
    return ret;
  }
};
class plot2d :public plot{

public:
  plot2d(const S_plot_def& plot_def, axis_ref* x, axis_ref* y) :m_x(x), m_y(y), m_plot_def(plot_def){
   
    m_outTree = std::make_shared<treeCollection_ouput>(plot_def.m_name.c_str(), &m_x_points, &m_y_points, &m_id, &m_current,plot_def.m_save2disk);
  
  }
  virtual Long64_t Draw(const char* options, const char* cuts = "", const char* axis = "y:x") override{
    return m_outTree->Draw(axis, cuts, options);
  }
  virtual void ProcessEvent() = 0;
  virtual void fill() override final{
    m_x_points.clear();
    m_y_points.clear();
    m_id.clear();
    

    ProcessEvent();

    m_outTree->fill();
    ++m_current;
  }
  inline void pushHit(Double_t x, Double_t y){
    m_x_points.push_back(x);
    m_y_points.push_back(y);
    m_id.push_back(0);

  
  }
  inline void pushHit(Double_t x, Double_t y ,Double_t ID){
    m_x_points.push_back(x);
    m_y_points.push_back(y);
    m_id.push_back(ID);


  }
protected:
  axis_ref* m_x;
  axis_ref* m_y;
  std::vector<double> m_x_points, m_y_points, m_id;
  S_plot_def m_plot_def;
  std::shared_ptr<treeCollection_ouput> m_outTree;
  Int_t m_current = 0;
};
class plot_corr2d :public plot2d{
public:
  plot_corr2d(const S_plot_def& plot_def, axis_ref* x, axis_ref* y) :plot2d(plot_def, x, y){}
  virtual void processEventStart() {}
  virtual void processHit(double x, double y) = 0;
  virtual void processEventEnd() {}
  virtual void ProcessEvent() override final{
    processEventStart();
    while (m_y->next()){
      while (m_x->next()){
        //      std::cout << m_x->get()<< "  "<< m_y->get() << std::endl;
        processHit(m_x->get(), m_y->get());
      }
    }
    processEventEnd();
  }
};
class plot_hit2d :public plot2d{
public:
  plot_hit2d(const S_plot_def& plot_def, axis_ref* x, axis_ref* y) :plot2d(plot_def, x, y){}
  virtual void processEventStart() {}
  virtual void processHit(double x, double y) = 0;
  virtual void processEventEnd() {}
  virtual void ProcessEvent() override final{
    processEventStart();
    while (m_y->next()){
      if (!m_x->next())
      {
        std::cout << "vector have different length" << std::endl;
        return;
      }
      //      std::cout << m_x->get()<< "  "<< m_y->get() << std::endl;
      processHit(m_x->get(), m_y->get());

    }

    if (m_x->next())
    {
      std::cout << "vector have different length" << std::endl;
    }
    processEventEnd();
  }
};


class hitMultiplizity :public plot_hit2d{

  hitMultiplizity(const S_plot_def& plot_def, axis_ref* x, axis_ref* y) :plot_hit2d(plot_def, x, y){}

  virtual void processEventStart() {
    m_counter = 0;

  }
  virtual void processHit(double x, double y) {
    ++m_counter; 
  };
  virtual void processEventEnd() {
  
    pushHit(m_counter, 0);
  }

  Int_t m_counter = 0;
  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("HitMultiplicity"), S_plane(m_outTree->m_name.c_str(), 0)));
    return ret;
  }
};

class rotated_plane: public plot_hit2d {
public:
  static const char* Angle_name(){ return "ANGLE___"; }
  rotated_plane(const S_plot_def& plot_def, axis_ref* x, axis_ref* y) :plot_hit2d(plot_def, x, y){
    std::string a;
    try {

      a = m_plot_def.getParameter(std::string(Angle_name()), std::string("0"));
   
      angele = atof(a.c_str());
    }
    catch (...){
      std::cout << "unable to convert \"" << a << "\"" << std::endl;
    }

  }
  virtual void processHit(double x, double y) override{
    auto h = rotate(plane_hit(x, y), angele);
    pushHit(h.x,h.y);
  }
  double angele=0;

  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("rotated"), S_plane(m_outTree->m_name.c_str(), 0)));
    return ret;
  }
};

class coordinate_transform : public plot_hit2d {
public:
  static const char* x_slope_name(){ return "x_slope___"; }
  static const char* y_slope_name(){ return "y_slope___"; }
  static const char* x_offset_name(){ return "x_offset_"; }
  static const char* y_offset_name(){ return "y_offset_"; }
  coordinate_transform(const S_plot_def& plot_def, axis_ref* x, axis_ref* y) :plot_hit2d(plot_def, x, y){
    try {

      m_x_offset = atof(m_plot_def.getParameter(std::string(x_offset_name()), std::string("0")).c_str());
      m_y_offset = atof(m_plot_def.getParameter(std::string(y_offset_name()), std::string("0")).c_str());
      m_x_slope= atof(m_plot_def.getParameter(std::string(x_slope_name()), std::string("0")).c_str());
      m_y_slope = atof(m_plot_def.getParameter(std::string(y_slope_name()), std::string("0")).c_str());
    }
    catch (...){
      std::cout << "[coordinate_transform] unable to convert" <<std::endl;
    }

  }
  virtual void processHit(double x, double y) override{

    
    pushHit( x*m_x_slope +m_x_offset, y*m_y_slope + m_y_offset);
  }
  double m_x_slope = 0;
  double m_y_slope = 0;
  double m_x_offset = 0;
  double m_y_offset = 0;

  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("coordinate_transform"), S_plane(m_outTree->m_name.c_str(), 0)));
    return ret;
  }
};


class hitmap :public plot_hit2d{
public:
  hitmap(const S_plot_def& plot_def, axis_ref* x, axis_ref* y) :plot_hit2d(plot_def, x, y){}
  virtual void processHit(double x, double y) override{
    pushHit(m_x->get(), m_y->get());
  }
  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("hitmap"), S_plane(m_outTree->m_name.c_str(), 0)));
    return ret;
  }
};
class ProjectOnPixel :public plot_hit2d{
public:
  ProjectOnPixel(const S_plot_def& plot_def, axis_ref* x, axis_ref* y) :plot_hit2d(plot_def, x, y){}

  virtual void processHit(double x, double y) override{
    pushHit((int)(m_x->get() / m_x_pixelsize * 100) % 100, (int)(m_y->get() / m_ypixelsize * 100) % 100);
  }

  double m_x_pixelsize = 0.074, m_ypixelsize = 100000;
  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("ProjectOnPixel"), S_plane(m_outTree->m_name.c_str(), 0)));
    return ret;
  }
};
class clusterSize :public plot_hit2d{
public:
  static const char* pixelDistance_name(){ return "pixelDistance___"; }
  clusterSize(const S_plot_def& plot_def, axis_ref* x, axis_ref* y) :plot_hit2d(plot_def, x, y) {
    m_cl = clusterMaker<Double_t>(atof(m_plot_def.getParameter(clusterSize::pixelDistance_name(), "2")));
  }
  virtual void processEventStart() override {
    m_cl.reset();
  }

  virtual void processHit(double x, double y) override{

    m_cl.push_pixel(pixelHit<Double_t>(x, y));
  }
  virtual void processEventEnd() override {


    for (size_t i = 0; i < m_cl.NumOfCluster(); ++i){
      pushHit(m_cl.getCluster(i).getPos().m_x, m_cl.getCluster(i).getPos().m_y, 0);
      pushHit(m_cl.getCluster(i).m_hits.size(), 1);
    }
  }
  clusterMaker<Double_t> m_cl;
  virtual s_plane_collection getOutputcollection() {

    
    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("clusterPos"), S_plane(m_outTree->m_name.c_str(), 0)));
    ret.m_planes.push_back(std::make_pair(std::string("clusterSize"), S_plane(m_outTree->m_name.c_str(), 1)));
    return ret;
  }
};
class correlations :public plot_corr2d{
public:
  correlations(const S_plot_def& plot_def, axis_ref* x, axis_ref* y) :plot_corr2d(plot_def, x, y){}
  
#ifdef _DEBUG
  virtual void processEventStart() override {
    int BreakPoint = 0;
  }

#endif // _DEBUG

  virtual void processHit(double x, double y) override{
    pushHit(x, y);
  }
  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("correlations"), S_plane(m_outTree->m_name.c_str(), 0)));
    return ret;
  }
};

class residual : public plot_corr2d {
public:
  residual(const S_plot_def& plot_def, axis_ref* x, axis_ref* y) :plot_corr2d(plot_def, x, y){}
  virtual void processHit(double x, double y) override{
    pushHit(x - y, ++m_index);
  }
  virtual Long64_t Draw(const char* options, const char* cuts = "", const char* axis = "x") override{
    return  m_outTree->Draw(axis, cuts, options);
  }

  virtual s_plane_collection getOutputcollection() {

    s_plane_collection ret;
    ret.m_planes.push_back(std::make_pair(std::string("residual"), S_plane(m_outTree->m_name.c_str(), 0)));
    return ret;
  }
private:
  double m_cut = -1;
  int m_index = 0;
};

plot* create_plot(const S_plot_def& plot_def, axis_ref* x, axis_ref* y){

  std::string s_type(plot_def.m_type);

  if (s_type.compare(sct::plot_hitmap()) == 0)
  {
    return dynamic_cast<plot*>(new hitmap(plot_def, x, y));

  }

  if (s_type.compare(sct::plot_correlation()) == 0)
  {
    return dynamic_cast<plot*>(new correlations(plot_def, x, y));
  }


  if (s_type.compare(sct::plot_residual()) == 0)
  {
    return dynamic_cast<plot*>(new residual(plot_def, x, y));
  }

  if (s_type.compare(sct::plot_clusterSize()) == 0)
  {
    return dynamic_cast<plot*> (new clusterSize(plot_def, x, y));
  }
  if (s_type.compare(sct::plot_projectOnPixel()) == 0)
  {
    return dynamic_cast<plot*>(new ProjectOnPixel(plot_def, x, y));
  }

  if (s_type.compare(sct::plot_rotated()) == 0)
  {

    return dynamic_cast<plot*>(new  rotated_plane(plot_def, x, y));

  }
  if (s_type.compare(sct::plot_coordinate_transform()) == 0)
  {

    return dynamic_cast<plot*>(new  coordinate_transform(plot_def, x, y));

  }
  std::cout << "cant find plot type : \"" << s_type << "\"" << std::endl;
  return nullptr;
}

plot* create_plot(const char* type, const char* name, axis_ref* x, axis_ref* y)
{
  return create_plot(S_plot_def(type, name), x, y);
}

plot* create_plot(const S_plot_def& plot_def, S_plane* x, S_plane* y){
  std::string s_type(plot_def.m_type);
  if (s_type.compare(sct::plot_find_correspondingX()) == 0)
  {

    return dynamic_cast<plot*>(new  plot_find_correspondingX(plot_def, x, y));

  }

  if (s_type.compare(sct::plot_find_correspondingXY()) == 0)
  {

    return dynamic_cast<plot*>(new  plot_find_correspondingXY(plot_def, x, y));

  }


  if (s_type.compare(sct::plot_Event_size()) == 0)
  {

    return dynamic_cast<plot*>(new  plot_Event_size(plot_def, x, y));

  }

  if (s_type.compare(sct::plot_find_nearest()) == 0)
  {

    return dynamic_cast<plot*>(new  find_nearest(plot_def, x, y));

  }


  if (s_type.compare(sct::plot_plane_distance()) == 0)
  {

    return dynamic_cast<plot*>(new  plane_distance(plot_def, x, y));

  }

  if (s_type.compare(sct::plot_find_nearest_strip()) == 0)
  {

    return dynamic_cast<plot*>(new  find_nearest_strip(plot_def, x, y));

  }


  if (s_type.compare(sct::plot_A_if_B()) == 0)
  {

    return dynamic_cast<plot*>(new  plot_a_if_b_has_a_hit(plot_def, x, y));

  }


  std::cout << "cant find plot type : \"" << s_type << "\"" << std::endl;
  return nullptr;
}
plot* create_plot(const char* type, const char* name, S_plane* x, S_plane* y){

  return create_plot(S_plot_def(type, name), x, y);
}

=======
>>>>>>> 2927d3b6b2a82571ae5f3391d15030f3252c19d2
S_Axis::S_Axis(const char* collctionName, double planeID, axis_def axis) :m_collectionName(collctionName), m_planeID(planeID), m_axis(axis)
{

}

S_DrawOption::S_DrawOption(const char* options /*= "colz"*/, const char* cuts /*= ""*/, const char * axis /*= "y:x"*/) : m_options(options), m_cuts(cuts), m_axis(axis)
{

}















void SCT_helpers::CutTH2(TH2* h, S_XCut x_cut, S_YCut y_cut, S_ZCut z_cut)
{
  bool set2zero_x =false,set2zero_y =false, set2zero_z = false;
  Double_t x = 0, y = 0,z=0;

  for (Int_t x_bin = 0; x_bin <= h->GetNbinsX(); ++x_bin)
  {
    set2zero_x= false;
    x = h->GetXaxis()->GetBinCenter(x_bin);
    if (x_cut.isOutOfRange(x))
    {
      set2zero_x = true;
    }
    
    for (Int_t y_bin = 0; y_bin <= h->GetNbinsY(); ++y_bin)
    {
      auto bin = h->GetBin(x_bin, y_bin);
      if (set2zero_x)
      {
        h->SetBinContent(bin, 0);
        continue;
      }
      set2zero_y = false;
      set2zero_z = false;
      y = h->GetYaxis()->GetBinCenter(y_bin);
      if (y_cut.isOutOfRange(y))
      {
        set2zero_y = true;
      }


      z = h->GetBinContent(bin);
      if (z_cut.isOutOfRange(z))
      {
        set2zero_z= true;
      }

      if (set2zero_y || set2zero_z)
      {
        h->SetBinContent(bin, 0);
      }
    }

  }
}

void SCT_helpers::CutTH2(TH2* h2, S_ZCut z)
{
  CutTH2(h2, S_XCut(), S_YCut(), z);
}

S_Cut::S_Cut(Double_t min_, Double_t max_) :m_min(min_), m_max(max_), m_cut_min(true), m_cut_max(true)
{

}

S_Cut::S_Cut(Double_t min_) : m_min(min_), m_max(0), m_cut_min(true), m_cut_max(false)
{

}

S_Cut::S_Cut() : m_min(0), m_max(0), m_cut_min(false), m_cut_max(false)
{

}

bool S_Cut::isOutOfRange(Double_t x)
{
  if (m_cut_min && m_min > x)
  {
    return true;
  }

  if (m_cut_max && m_max < x)
  {
    return true;
  }
  return false;
}

S_XCut::S_XCut(Double_t min_, Double_t max_) : S_Cut(min_, max_)
{

}

S_XCut::S_XCut(Double_t min_) : S_Cut(min_)
{

}

S_XCut::S_XCut()
{

}

S_YCut::S_YCut(Double_t min_, Double_t max_) : S_Cut(min_, max_)
{

}

S_YCut::S_YCut(Double_t min_) : S_Cut(min_)
{

}

S_YCut::S_YCut()
{

}

S_ZCut::S_ZCut(Double_t min_, Double_t max_) : S_Cut(min_, max_)
{

}

S_ZCut::S_ZCut(Double_t min_) : S_Cut(min_)
{

}

S_ZCut::S_ZCut()
{

}


